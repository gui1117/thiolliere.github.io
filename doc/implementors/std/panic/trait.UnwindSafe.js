(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; UnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; UnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; UnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl UnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; UnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; UnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !UnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrintFmt","synthetic":true,"types":[]}];
implementors["base58"] = [{"text":"impl UnwindSafe for FromBase58Error","synthetic":true,"types":[]}];
implementors["bip39"] = [{"text":"impl UnwindSafe for Mnemonic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Seed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Language","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MnemonicType","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;T&gt; UnwindSafe for BitIdx&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BitPos&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BitMask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Msb0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; UnwindSafe for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for Iter&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for IterMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for ChunksExactMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for ChunksMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for RChunksExactMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for RChunksMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; UnwindSafe for Split&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; !UnwindSafe for SplitMut&lt;'a, O, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; UnwindSafe for RSplit&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; !UnwindSafe for RSplitMut&lt;'a, O, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; UnwindSafe for SplitN&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; !UnwindSafe for SplitNMut&lt;'a, O, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; UnwindSafe for RSplitN&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; !UnwindSafe for RSplitNMut&lt;'a, O, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for BitMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; UnwindSafe for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; UnwindSafe for IntoIter&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; UnwindSafe for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for Drain&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; UnwindSafe for IntoIter&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, I&gt; UnwindSafe for Splice&lt;'a, O, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["blake2_rfc"] = [{"text":"impl UnwindSafe for Blake2bResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Blake2b","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Blake2sResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Blake2s","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; UnwindSafe for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byte_slice_cast"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["chain_spec_builder"] = [{"text":"impl UnwindSafe for ChainSpecBuilder","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; UnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; UnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl UnwindSafe for Scalar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MontgomeryPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressedEdwardsY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EdwardsPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VartimeEdwardsPrecomputation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EdwardsBasepointTable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressedRistretto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RistrettoPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VartimeRistrettoPrecomputation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RistrettoBasepointTable","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl UnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["ed25519"] = [{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl UnwindSafe for Keypair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecretKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpandedSecretKey","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; UnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ethbloom"] = [{"text":"impl UnwindSafe for Bloom","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BloomRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Input&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ethereum_types"] = [{"text":"impl UnwindSafe for H128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H264","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H520","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U64","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !UnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fork_tree"] = [{"text":"impl&lt;H, N, V&gt; UnwindSafe for ForkTree&lt;H, N, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for FinalizationResult&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_benchmarking"] = [{"text":"impl UnwindSafe for BenchmarkBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BenchmarkResults","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BenchmarkConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Analysis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BenchmarkParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BenchmarkSelector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]}];
implementors["frame_benchmarking_cli"] = [{"text":"impl UnwindSafe for BenchmarkCmd","synthetic":true,"types":[]}];
implementors["frame_executive"] = [{"text":"impl&lt;System, Block, Context, UnsignedValidator, AllModules, OnRuntimeUpgrade&gt; UnwindSafe for Executive&lt;System, Block, Context, UnsignedValidator, AllModules, OnRuntimeUpgrade&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllModules: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Context: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;OnRuntimeUpgrade: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;System: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;UnsignedValidator: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_metadata"] = [{"text":"impl UnwindSafe for FunctionMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionArgumentMetadata","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for FnEncode&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OuterEventMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventMetadata","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StorageEntryMetadata","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ModuleConstantMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorMetadata","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DefaultByteGetter","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StorageMetadata","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RuntimeMetadataPrefixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtrinsicMetadata","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RuntimeMetadataV12","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ModuleMetadata","synthetic":true,"types":[]},{"text":"impl&lt;B, O&gt; UnwindSafe for DecodeDifferent&lt;B, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageHasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageEntryType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageEntryModifier","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RuntimeMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuntimeMetadataDeprecated","synthetic":true,"types":[]}];
implementors["frame_support"] = [{"text":"impl UnwindSafe for Twox256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Twox128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Blake2_256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Blake2_128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Twox64Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Blake2_128Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Never","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuntimeLogger","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PrefixIterator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StorageIterator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, T, H&gt; UnwindSafe for StorageKeyIterator&lt;K, T, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Prefix, Value, QueryKind, OnEmpty&gt; UnwindSafe for StorageValue&lt;Prefix, Value, QueryKind, OnEmpty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnEmpty: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prefix: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;QueryKind: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Prefix, Hasher, Key, Value, QueryKind, OnEmpty&gt; UnwindSafe for StorageMap&lt;Prefix, Hasher, Key, Value, QueryKind, OnEmpty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;OnEmpty: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prefix: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;QueryKind: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind, OnEmpty&gt; UnwindSafe for StorageDoubleMap&lt;Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind, OnEmpty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;OnEmpty: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prefix: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;QueryKind: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OptionQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueQuery","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; UnwindSafe for FilterStackGuard&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; UnwindSafe for ClearFilterGuard&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as FilterStack&lt;T&gt;&gt;::Stack: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Created, Removed, K, T&gt; UnwindSafe for StorageMapShim&lt;S, Created, Removed, K, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Created: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Removed: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, Imbalance, Part1, Target1, Part2, Target2&gt; UnwindSafe for SplitTwoWays&lt;Balance, Imbalance, Part1, Target1, Part2, Target2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Imbalance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Part1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Part2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Target1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Target2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WithdrawReasons","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestRandomness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CallMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetDefault","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U128CurrencyToVote","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SaturatingCurrencyToVote","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PalletVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistenceRequirement","synthetic":true,"types":[]},{"text":"impl&lt;B, P&gt; UnwindSafe for SignedImbalance&lt;B, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Imbalance&lt;B&gt;&gt;::Opposite: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BalanceStatus","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; UnwindSafe for DispatchTime&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DispatchInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PostDispatchInfo","synthetic":true,"types":[]},{"text":"impl&lt;WD, CD, PF&gt; UnwindSafe for FunctionOf&lt;WD, CD, PF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CD: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;WD: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuntimeDbWeight","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; UnwindSafe for WeightToFeeCoefficient&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IdentityFee&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pays","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DispatchClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockExecutionWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtrinsicBaseWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksDbWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParityDbWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrameTransactionPriority","synthetic":true,"types":[]}];
implementors["frame_support_procedural_tools"] = [{"text":"impl UnwindSafe for StopParse","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Braces&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Brackets&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for Parens&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T, V&gt; UnwindSafe for PunctuatedInner&lt;P, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoTrailing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trailing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OuterAttributes","synthetic":true,"types":[]}];
implementors["frame_support_test"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_system"] = [{"text":"impl&lt;T&gt; UnwindSafe for CheckMortality&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CheckGenesis&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CheckNonce&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CheckSpecVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CheckTxVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CheckWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; UnwindSafe for EventRecord&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Index, AccountData&gt; UnwindSafe for AccountInfo&lt;Index, AccountData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountData: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LastRuntimeUpgradeInfo","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for EnsureRoot&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for EnsureSigned&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Who, AccountId&gt; UnwindSafe for EnsureSignedBy&lt;Who, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Who: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for EnsureNone&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EnsureNever&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, L, R&gt; UnwindSafe for EnsureOneOf&lt;AccountId, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CallOnCreatedAccount&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CallKillAccount&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ChainContext&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Phase","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for RawOrigin&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RefStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForAll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForAny","synthetic":true,"types":[]},{"text":"impl&lt;T, OverarchingCall&gt; UnwindSafe for SubmitTransaction&lt;T, OverarchingCall&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OverarchingCall: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, C, X&gt; UnwindSafe for Signer&lt;T, C, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Public: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Account&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Public: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pallet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for _GeneratedPrefixForStorageAccount&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for _GeneratedPrefixForStorageBlockHash&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for _GeneratedPrefixForStorageLastRuntimeUpgrade&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Event&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_system_benchmarking"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; UnwindSafe for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; UnwindSafe for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; UnwindSafe for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; UnwindSafe for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; UnwindSafe for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; UnwindSafe for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; UnwindSafe for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; UnwindSafe for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; UnwindSafe for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Shared&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; UnwindSafe for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; UnwindSafe for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; UnwindSafe for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; UnwindSafe for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Buffered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for BufferUnordered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitSink&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; UnwindSafe for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for FuturesUnordered&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !UnwindSafe for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; UnwindSafe for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; UnwindSafe for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; UnwindSafe for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for NotifyHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLockAcquire&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLockAcquired&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !UnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !UnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; UnwindSafe for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalSpawner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPoolBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl UnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; UnwindSafe for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; UnwindSafe for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Remote&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; UnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; UnwindSafe for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; UnwindSafe for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; UnwindSafe for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; UnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; UnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; UnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; UnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; UnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; UnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; UnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; UnwindSafe for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; UnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for Next&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for Peek&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; UnwindSafe for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for SelectNextSome&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; UnwindSafe for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; UnwindSafe for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !UnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; !UnwindSafe for ReuniteError&lt;T, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; !UnwindSafe for SplitSink&lt;S, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; UnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; UnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; UnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for TryNext&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !UnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Close&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; UnwindSafe for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Flush&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; UnwindSafe for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; UnwindSafe for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Send&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, St&gt; !UnwindSafe for SendAll&lt;'a, Si, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; UnwindSafe for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; UnwindSafe for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; UnwindSafe for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ex&gt; UnwindSafe for Executor01As03&lt;Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Compat01As03&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, SinkItem&gt; !UnwindSafe for Compat01As03Sink&lt;S, SinkItem&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Compat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; UnwindSafe for CompatSink&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Close&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W&gt; !UnwindSafe for Copy&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W&gt; !UnwindSafe for CopyBuf&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Flush&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; UnwindSafe for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for Read&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadVectored&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadExact&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadLine&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadToEnd&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadToString&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadUntil&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; !UnwindSafe for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Write&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for WriteVectored&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for WriteAll&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; !UnwindSafe for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for BiLockAcquire&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hash256_std_hasher"] = [{"text":"impl UnwindSafe for Hash256StdHasher","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl UnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; UnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac_drbg"] = [{"text":"impl&lt;D&gt; UnwindSafe for HmacDRBG&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as FixedOutput&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; UnwindSafe for Key&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'v&gt; !UnwindSafe for Value&lt;'v&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'f&gt; !UnwindSafe for Slot&lt;'s, 'f&gt;","synthetic":true,"types":[]}];
implementors["matchers"] = [{"text":"impl&lt;S, A&gt; UnwindSafe for Pattern&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, A&gt; UnwindSafe for Matcher&lt;'a, S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memory_db"] = [{"text":"impl&lt;T&gt; UnwindSafe for MemCounter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for NoopTracker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, KF, T, M&gt; UnwindSafe for MemoryDB&lt;H, KF, T, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;KF: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;KF as KeyFunction&lt;H&gt;&gt;::Key: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for HashKey&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for PrefixedKey&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for LegacyPrefixedKey&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["merlin"] = [{"text":"impl UnwindSafe for Transcript","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranscriptRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranscriptRngBuilder","synthetic":true,"types":[]}];
implementors["node_bench"] = [{"text":"impl UnwindSafe for Opt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizeType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstructionBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstructionBenchmark","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PoolTransaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transactions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BenchmarkOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NsFormatter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportBenchmark","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SimpleTrie&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TempDatabase","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParityDbWrapper","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatabaseType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KUSAMA_STATE_DISTRIBUTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrieReadBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrieReadBenchmark","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Storage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrieWriteBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrieWriteBenchmark","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizePool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatabaseSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PoolBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PoolBenchmark","synthetic":true,"types":[]}];
implementors["node_cli"] = [{"text":"impl UnwindSafe for Cli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Subcommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extensions","synthetic":true,"types":[]}];
implementors["node_executor"] = [{"text":"impl UnwindSafe for Executor","synthetic":true,"types":[]}];
implementors["node_inspect"] = [{"text":"impl UnwindSafe for DebugPrinter","synthetic":true,"types":[]},{"text":"impl&lt;TBlock, TPrinter&nbsp;=&nbsp;DebugPrinter&gt; !UnwindSafe for Inspector&lt;TBlock, TPrinter&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; UnwindSafe for BlockAddress&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; UnwindSafe for ExtrinsicAddress&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InspectCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InspectSubCmd","synthetic":true,"types":[]}];
implementors["node_primitives"] = [{"text":"impl UnwindSafe for ReporterAppCrypto","synthetic":true,"types":[]}];
implementors["node_rpc"] = [{"text":"impl&lt;C, F, P&gt; !UnwindSafe for LightDeps&lt;C, F, P&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BabeDeps","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for GrandpaDeps&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, P, SC, B&gt; !UnwindSafe for FullDeps&lt;C, P, SC, B&gt;","synthetic":true,"types":[]}];
implementors["node_runtime"] = [{"text":"impl UnwindSafe for DealWithFees","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockHashCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumBlockWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AvailableBlockRatio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumExtrinsicWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumBlockLength","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DepositBase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DepositFactor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxSignatories","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProxyDepositBase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProxyDepositFactor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxProxies","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnnouncementDepositBase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnnouncementDepositFactor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxPending","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumSchedulerWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxScheduledPerBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpochDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpectedBlockTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistentialDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxLocks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransactionByteFee","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetBlockFullness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdjustmentVariable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinimumMultiplier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UncleGenerations","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionKeys","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisabledValidatorsThreshold","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionsPerEra","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BondingDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SlashDeferDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RewardCurve","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxNominatorRewardedPerValidator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElectionLookahead","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxIterations","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinSolutionScoreBump","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffchainSolutionWeightLimit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LaunchPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VotingPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FastTrackVotingPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstantAllowed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinimumDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnactmentPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CooloffPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreimageByteDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxVotes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxProposals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CouncilMotionDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CouncilMaxProposals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CouncilMaxMembers","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CandidacyBond","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VotingBond","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TermDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DesiredMembers","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DesiredRunnersUp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElectionsPhragmenModuleId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TechnicalMotionDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TechnicalMaxProposals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TechnicalMaxMembers","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProposalBond","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProposalBondMinimum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpendPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Burn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TipCountdown","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TipFindersFee","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TipReportDepositBase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataDepositPerByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BountyDepositBase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BountyDepositPayoutDelay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TreasuryModuleId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BountyUpdatePeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumReasonLength","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BountyCuratorDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BountyValueMinimum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TombstoneDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RentByteFee","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RentDepositOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SurchargeReward","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImOnlineUnsignedPriority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StakingUnsignedPriority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffencesWeightSoftLimit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasicDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubAccountDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxSubAccounts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxAdditionalFields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxRegistrars","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigDepositBase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FriendDepositFactor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxFriends","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecoveryDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CandidateDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WrongSideDeduction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxStrikes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RotationPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeriodSpend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxLockDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChallengePeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocietyModuleId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinVestedTransfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PalletInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuntimeApi","synthetic":true,"types":[]},{"text":"impl&lt;Block, C&gt; !UnwindSafe for RuntimeApiImpl&lt;Block, C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProxyType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OriginCaller","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Call","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Author","synthetic":true,"types":[]}];
implementors["node_template"] = [{"text":"impl UnwindSafe for Executor","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; UnwindSafe for FullDeps&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["node_template_runtime"] = [{"text":"impl UnwindSafe for BlockHashCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumBlockWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AvailableBlockRatio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumExtrinsicWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumBlockLength","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistentialDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxLocks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransactionByteFee","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PalletInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuntimeApi","synthetic":true,"types":[]},{"text":"impl&lt;Block, C&gt; !UnwindSafe for RuntimeApiImpl&lt;Block, C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OriginCaller","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Call","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionKeys","synthetic":true,"types":[]}];
implementors["node_testing"] = [{"text":"impl UnwindSafe for GenesisParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BenchKeyring","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BenchDb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockContent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BlockContentIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BenchContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatabaseType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyTypes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Profile","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl UnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sign","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; UnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;UnwindSafe&gt; UnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_assets"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AssetId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, AssetId&gt; UnwindSafe for RawEvent&lt;AccountId, Balance, AssetId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;AssetId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_atomic_swap"] = [{"text":"impl&lt;T&gt; UnwindSafe for PendingSwap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::SwapAction: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, C&gt; UnwindSafe for BalanceSwapAction&lt;AccountId, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Currency&lt;AccountId&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PendingSwaps&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, PendingSwap&gt; UnwindSafe for RawEvent&lt;AccountId, PendingSwap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PendingSwap: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::SwapAction: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_aura"] = [{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AuthorityId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Authorities&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_authority_discovery"] = [{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_authorship"] = [{"text":"impl&lt;T&gt; UnwindSafe for SealVerify&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; UnwindSafe for OnePerAuthorPerHeight&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Header: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_babe"] = [{"text":"impl&lt;FullIdentification&gt; UnwindSafe for BabeEquivocationOffence&lt;FullIdentification&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FullIdentification: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; UnwindSafe for EquivocationHandler&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExternalTrigger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SameAuthoritiesForever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpochIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Authorities","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisSlot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CurrentSlot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Randomness","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::KeyOwnerProof: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_balances"] = [{"text":"impl&lt;T, I&gt; UnwindSafe for PositiveImbalance&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Subtrait&lt;I&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for NegativeImbalance&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Subtrait&lt;I&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; UnwindSafe for BalanceLock&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; UnwindSafe for AccountData&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for TotalIssuance&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Account&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Locks&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, I&gt; UnwindSafe for RawEvent&lt;AccountId, Balance, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reasons","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_collective"] = [{"text":"impl UnwindSafe for PrimeDefaultVote","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoreThanMajorityThenPrimeDefaultVote","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, BlockNumber&gt; UnwindSafe for Votes&lt;AccountId, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Proposals&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for ProposalOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Voting&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ProposalCount&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Members&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Prime&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, I&gt; UnwindSafe for EnsureMember&lt;AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, AccountId, I&gt; UnwindSafe for EnsureMembers&lt;N, AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D, AccountId, I&gt; UnwindSafe for EnsureProportionMoreThan&lt;N, D, AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D, AccountId, I&gt; UnwindSafe for EnsureProportionAtLeast&lt;N, D, AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, I&gt; UnwindSafe for RawOrigin&lt;AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, AccountId, I&gt; UnwindSafe for RawEvent&lt;Hash, AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Proposal: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_contracts"] = [{"text":"impl&lt;T&gt; UnwindSafe for GasMeter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Schedule&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFnWeights","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstructionWeights","synthetic":true,"types":[]},{"text":"impl&lt;CodeHash, Balance, BlockNumber&gt; UnwindSafe for RawAliveContractInfo&lt;CodeHash, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, Hasher&gt; UnwindSafe for RawTombstoneContractInfo&lt;H, Hasher&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrieIdFromParentCounter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultSignedClaimHandicap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultTombstoneDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultStorageSizeOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultRentByteFee","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultRentDepositOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultSurchargeReward","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultMaxDepth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultMaxValueSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SimpleAddressDeterminer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PristineCode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CodeStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccountCounter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ContractInfoOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Config&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnCode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ContractInfo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hashing: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId, Hash&gt; UnwindSafe for RawEvent&lt;Balance, AccountId, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_contracts_primitives"] = [{"text":"impl UnwindSafe for ContractExecResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecReturnValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContractAccessError","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; UnwindSafe for RentProjection&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorOrigin","synthetic":true,"types":[]}];
implementors["pallet_contracts_rpc"] = [{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for CallRequest&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpcContractExecResult","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; UnwindSafe for Contracts&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockHash, BlockNumber, AccountId, Balance&gt; !UnwindSafe for Client&lt;BlockHash, BlockNumber, AccountId, Balance&gt;","synthetic":true,"types":[]}];
implementors["pallet_democracy"] = [{"text":"impl UnwindSafe for Vote","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, Hash, Balance&gt; UnwindSafe for ReferendumStatus&lt;BlockNumber, Hash, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; UnwindSafe for Tally&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; UnwindSafe for Delegations&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicPropCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PublicProps&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DepositOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Preimages&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferendumCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LowestUnbaked","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ReferendumInfoOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VotingOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Locks&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LastTabledWasExternal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for NextExternal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Blacklist&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Cancellations&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VoteThreshold","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; UnwindSafe for AccountVote&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId, BlockNumber&gt; UnwindSafe for Voting&lt;Balance, AccountId, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Conviction","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, Hash, Balance&gt; UnwindSafe for ReferendumInfo&lt;BlockNumber, Hash, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnvoteScope","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; UnwindSafe for PreimageStatus&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId, Hash, BlockNumber&gt; UnwindSafe for RawEvent&lt;Balance, AccountId, Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_elections"] = [{"text":"impl&lt;Balance&gt; UnwindSafe for VoterInfo&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PresentationDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TermDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DesiredSeats","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Members&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VoteCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ApprovalsOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RegisterInfoOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VoterInfoOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Voters&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NextVoterSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VoterCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Candidates&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CandidateCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for NextFinalize&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Leaderboard&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CellStatus","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_elections_phragmen"] = [{"text":"impl&lt;AccountId&gt; UnwindSafe for DefunctVoter&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Members&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RunnersUp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElectionRounds","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Voting&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Candidates&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Renouncing","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId&gt; UnwindSafe for RawEvent&lt;Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_evm"] = [{"text":"impl UnwindSafe for Account","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Log","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vicinity","synthetic":true,"types":[]},{"text":"impl&lt;'vicinity, T&gt; UnwindSafe for Backend&lt;'vicinity, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnsureAddressSame","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for EnsureAddressRoot&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for EnsureAddressNever&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnsureAddressTruncated","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IdentityAddressMapping","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for HashedAddressMapping&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SystemChainId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisAccount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECRecover","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ripemd160","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]}];
implementors["pallet_example"] = [{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;DefaultInstance&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WatchDummy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for RawEvent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;DefaultInstance&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_example_offchain_worker"] = [{"text":"impl&lt;Public, BlockNumber&gt; UnwindSafe for PricePayload&lt;Public, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Public: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Public: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Signature: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestAuthId","synthetic":true,"types":[]}];
implementors["pallet_example_parallel"] = [{"text":"impl UnwindSafe for EnlistedParticipant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_grandpa"] = [{"text":"impl&lt;I, R, O&gt; UnwindSafe for EquivocationHandler&lt;I, R, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;FullIdentification&gt; UnwindSafe for GrandpaEquivocationOffence&lt;FullIdentification&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FullIdentification: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrandpaTimeSlot","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for OldStoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for StoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for StoredState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::KeyOwnerProof: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_identity"] = [{"text":"impl UnwindSafe for IdentityFields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IdentityInfo","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; UnwindSafe for Registration&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId&gt; UnwindSafe for RegistrarInfo&lt;Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IdentityOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SuperOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubsOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Registrars&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; UnwindSafe for Judgement&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IdentityField","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_im_online"] = [{"text":"impl&lt;BlockNumber&gt; UnwindSafe for Heartbeat&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AuthorityId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Offender&gt; UnwindSafe for UnresponsivenessOffence&lt;Offender&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AuthorityId, IdentificationTuple&gt; UnwindSafe for RawEvent&lt;AuthorityId, IdentificationTuple&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;IdentificationTuple: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::AuthorityId as RuntimeAppPublic&gt;::Signature: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_indices"] = [{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountIndex: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Accounts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, AccountIndex&gt; UnwindSafe for RawEvent&lt;AccountId, AccountIndex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountIndex: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountIndex: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, AccountIndex&gt; UnwindSafe for Address&lt;AccountId, AccountIndex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountIndex: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_membership"] = [{"text":"impl UnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Event, I&gt; UnwindSafe for RawEvent&lt;AccountId, Event, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Event: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_multisig"] = [{"text":"impl&lt;BlockNumber&gt; UnwindSafe for Timepoint&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, Balance, AccountId&gt; UnwindSafe for Multisig&lt;BlockNumber, Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Multisigs&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Calls&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, BlockNumber, CallHash&gt; UnwindSafe for RawEvent&lt;AccountId, BlockNumber, CallHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;CallHash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_nicks"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_node_authorization"] = [{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WellKnownNodes","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Owners&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdditionalConnections","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_offences"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_offences_benchmarking"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_proxy"] = [{"text":"impl&lt;AccountId, ProxyType, BlockNumber&gt; UnwindSafe for ProxyDefinition&lt;AccountId, ProxyType, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProxyType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Hash, BlockNumber&gt; UnwindSafe for Announcement&lt;AccountId, Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Proxies&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Announcements&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, ProxyType, Hash&gt; UnwindSafe for RawEvent&lt;AccountId, ProxyType, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProxyType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::CallHasher as Hash&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::ProxyType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_randomness_collective_flip"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_recovery"] = [{"text":"impl&lt;BlockNumber, Balance, AccountId&gt; UnwindSafe for ActiveRecovery&lt;BlockNumber, Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, Balance, AccountId&gt; UnwindSafe for RecoveryConfig&lt;BlockNumber, Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Recoverable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ActiveRecoveries&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Proxy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_scheduler"] = [{"text":"impl&lt;Call, BlockNumber, PalletsOrigin, AccountId&gt; UnwindSafe for ScheduledV2&lt;Call, BlockNumber, PalletsOrigin, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PalletsOrigin: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Agenda&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; UnwindSafe for RawEvent&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_scored_pool"] = [{"text":"impl UnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Score: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, I&gt; UnwindSafe for RawEvent&lt;AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Score: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_session"] = [{"text":"impl&lt;Period, Offset&gt; UnwindSafe for PeriodicSessions&lt;Period, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Period: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestSessionHandler","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Keys: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::ValidatorId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Inner&gt; UnwindSafe for FindAccountFromAuthorIndex&lt;T, Inner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Inner: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Keys: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for NoteHistoricalRoot&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ProvingTrie&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hashing: Hasher + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_session_benchmarking"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_society"] = [{"text":"impl&lt;Balance, BlockNumber&gt; UnwindSafe for Payout&lt;Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for Bid&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&lt;I&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Founder&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Rules&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Candidates&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for SuspendedCandidates&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Pot&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Head&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Members&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for SuspendedMembers&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EnsureFounder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vote","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Judgement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VouchingStatus","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for BidKind&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&lt;I&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, I&gt; UnwindSafe for RawEvent&lt;AccountId, Balance, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_staking"] = [{"text":"impl UnwindSafe for CompactAssignments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActiveEraInfo","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for EraRewardPoints&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValidatorPrefs","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; UnwindSafe for UnlockChunk&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for StakingLedger&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for Nominations&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for IndividualExposure&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for Exposure&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for UnappliedSlash&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for ElectionResult&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElectionSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValidatorCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinimumValidatorCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Invulnerables&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bonded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Ledger&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Payee&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Validators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Nominators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CurrentEra","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActiveEra","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErasStartSessionIndex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ErasStakers&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ErasStakersClipped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ErasValidatorPrefs&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ErasValidatorReward&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ErasRewardPoints&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ErasTotalStake&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForceEra","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SlashRewardFraction","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CanceledSlashPayout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for UnappliedSlashes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SnapshotValidators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SnapshotNominators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for QueuedElected&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueuedScore","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EraElectionStatus&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsCurrentSessionFinal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StashOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ExposureOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; UnwindSafe for FilterHistoricalOffences&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for StakerStatus&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for RewardDestination&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElectionCompute","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; UnwindSafe for ElectionStatus&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Forcing","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId&gt; UnwindSafe for RawEvent&lt;Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SlashingSpans","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffchainElectionError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_sudo"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_template"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_timestamp"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Now&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Moment: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment"] = [{"text":"impl&lt;C, OU&gt; UnwindSafe for CurrencyAdapter&lt;C, OU&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;OU: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, V, M&gt; UnwindSafe for TargetedFeeAdjustment&lt;T, S, V, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NextFeeMultiplier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ChargeTransactionPayment&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::OnChargeTransaction as OnChargeTransaction&lt;T&gt;&gt;::Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment_rpc"] = [{"text":"impl&lt;BlockHash, ResponseType&gt; !UnwindSafe for Client&lt;BlockHash, ResponseType&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; UnwindSafe for TransactionPayment&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment_rpc_runtime_api"] = [{"text":"impl&lt;Balance&gt; UnwindSafe for RuntimeDispatchInfo&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_treasury"] = [{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for Proposal&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber, Hash&gt; UnwindSafe for OpenTip&lt;AccountId, Balance, BlockNumber, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; UnwindSafe for Bounty&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Tips&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Reasons&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for BountyCount&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Bounties&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for BountyDescriptions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for BountyApprovals&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, BlockNumber&gt; UnwindSafe for BountyStatus&lt;AccountId, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId, Hash, I&gt; UnwindSafe for RawEvent&lt;Balance, AccountId, Hash, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&lt;I&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_utility"] = [{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_vesting"] = [{"text":"impl&lt;Balance, BlockNumber&gt; UnwindSafe for VestingInfo&lt;Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Vesting&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; UnwindSafe for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parity_scale_codec"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OptionBool","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Compact&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; UnwindSafe for Ref&lt;'a, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parity_util_mem"] = [{"text":"impl !UnwindSafe for MallocSizeOfOps","synthetic":true,"types":[]}];
implementors["parity_wasm"] = [{"text":"impl UnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CodeSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemorySection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExportSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElementSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CustomSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResizableLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExportEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarUint32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarUint7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uint8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarUint1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarInt7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uint32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarInt32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarInt64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uint64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarUint64","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CountedList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for CountedWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for CountedListWriter&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instructions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitExpr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BrTableData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Func","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FuncBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElementSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataSegment","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IndexMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NameSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleNameSubsection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionNameSubsection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalNameSubsection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RelocSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unparsed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportCountType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Section","synthetic":true,"types":[]},{"text":"impl UnwindSafe for External","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Internal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableElementType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instruction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RelocationEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for SignatureBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for SignaturesBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FunctionBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for TypeRefBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FuncBodyBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FunctionDefinition","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for DataSegmentBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for ExportBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for ExportInternalBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for GlobalBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for ImportBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for MemoryBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for ModuleBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for TableBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableDefinition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableEntryDefinition","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["phragmen_balancing"] = [{"text":"impl UnwindSafe for ElectionType","synthetic":true,"types":[]}];
implementors["phragmms_balancing"] = [{"text":"impl UnwindSafe for ElectionType","synthetic":true,"types":[]}];
implementors["primitive_types"] = [{"text":"impl UnwindSafe for U128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H160","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl UnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; UnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SmallRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; UnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl UnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl UnwindSafe for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["reduce"] = [{"text":"impl UnwindSafe for ElectionType","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["rlp"] = [{"text":"impl UnwindSafe for PayloadInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Rlp&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'view&gt; !UnwindSafe for RlpIterator&lt;'a, 'view&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RlpStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecoderError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Prototype","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl UnwindSafe for FxHasher","synthetic":true,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl&lt;T&gt; UnwindSafe for ToHexIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FromHexIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["sc_authority_discovery"] = [{"text":"impl !UnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl&lt;Client, Network, Block, DhtEventStream&gt; !UnwindSafe for Worker&lt;Client, Network, Block, DhtEventStream&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WorkerConfig","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Role","synthetic":true,"types":[]}];
implementors["sc_basic_authorship"] = [{"text":"impl&lt;A, B, C&gt; !UnwindSafe for ProposerFactory&lt;A, B, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, Block, C, A&gt; !UnwindSafe for Proposer&lt;B, Block, C, A&gt;","synthetic":true,"types":[]}];
implementors["sc_block_builder"] = [{"text":"impl&lt;Block, StateBackend&gt; UnwindSafe for BuiltBlock&lt;Block, StateBackend&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;StateBackend as Backend&lt;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing&gt;&gt;::Transaction: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Block, A, B&gt; UnwindSafe for BlockBuilder&lt;'a, Block, A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as ProvideRuntimeApi&lt;Block&gt;&gt;::Api: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Extrinsic: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_chain_spec"] = [{"text":"impl&lt;G, E&nbsp;=&nbsp;Option&lt;()&gt;&gt; !UnwindSafe for ChainSpec&lt;G, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for LightSyncState&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SerializableLightSyncState","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, T&gt; UnwindSafe for Forks&lt;BlockNumber, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Group&gt;::Fork: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_cli"] = [{"text":"impl UnwindSafe for BuildSpecCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckBlockCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExportBlocksCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExportStateCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportBlocksCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PurgeChainCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InsertCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InspectKeyCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateNodeKeyCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InspectNodeKeyCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VanityCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifyCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RevertCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RunCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatabaseParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecutionStrategiesParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeystoreParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetworkParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeKeyParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffchainWorkerParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PruningParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SharedParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransactionPoolParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericNumber","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockNumberOrHash","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CryptoSchemeFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputTypeFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetworkSchemeFlag","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !UnwindSafe for Runner&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeySubcommand","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmExecutionMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TracingReceiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeKeyType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CryptoScheme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecutionStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpcMethods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Database","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffchainWorkerEnabled","synthetic":true,"types":[]}];
implementors["sc_client_api"] = [{"text":"impl&lt;Block&gt; UnwindSafe for ImportSummary&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, B&gt; UnwindSafe for ClientImportOperation&lt;Block, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&lt;Block&gt;&gt;::BlockImportOperation: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, State, Block&gt; UnwindSafe for KeyIterator&lt;'a, State, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;State: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewBlockState","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for ClientInfo&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemorySize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StateDbMemoryInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IoInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsageInfo","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for BlockImportNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for FinalityNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecutionStrategies","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for ExecutionExtensions&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for Blockchain&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for BlockImportOperation&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Codec + Ord + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for Backend&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; UnwindSafe for RemoteCallRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; UnwindSafe for RemoteHeaderRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; UnwindSafe for RemoteReadRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; UnwindSafe for RemoteReadChildRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; UnwindSafe for RemoteChangesRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; UnwindSafe for ChangesProof&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; UnwindSafe for RemoteBodyRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Data, Request&gt; UnwindSafe for LocalOrRemote&lt;Data, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Request: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; UnwindSafe for ImportDisplaced&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; UnwindSafe for FinalizationDisplaced&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; UnwindSafe for LeafSet&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, N&gt; !UnwindSafe for Undo&lt;'a, H, N&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageChangeSet","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for StorageNotifications&lt;Block&gt;","synthetic":true,"types":[]}];
implementors["sc_client_db"] = [{"text":"impl&lt;Block&gt; !UnwindSafe for RefTrackingState&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DatabaseSettings","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for BlockchainDb&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for BlockImportOperation&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for Backend&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DatabaseSettingsSrc","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for LightStorage&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalStorage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyTracker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadWriteTracker","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for BenchmarkingState&lt;B&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus"] = [{"text":"impl&lt;B, Block&gt; UnwindSafe for LongestChain&lt;B, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus_aura"] = [{"text":"impl&lt;C, P, CAW&gt; !UnwindSafe for AuraVerifier&lt;C, P, CAW&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, I, P&gt; UnwindSafe for AuraBlockImport&lt;Block, C, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus_babe"] = [{"text":"impl UnwindSafe for Epoch","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for BabeIntermediate&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;B, C, E, I, SO, SC, CAW&gt; !UnwindSafe for BabeParams&lt;B, C, E, I, SO, SC, CAW&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for BabeWorker&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for BabeLink&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client, SelectChain, CAW&gt; !UnwindSafe for BabeVerifier&lt;Block, Client, SelectChain, CAW&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client, I&gt; !UnwindSafe for BabeBlockImport&lt;Block, Client, I&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus_babe_rpc"] = [{"text":"impl&lt;B, C, SC&gt; !UnwindSafe for BabeRpcHandler&lt;B, C, SC&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpochAuthorship","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]}];
implementors["sc_consensus_epochs"] = [{"text":"impl&lt;H, Block&gt; UnwindSafe for HeaderBackendDescendentBuilder&lt;H, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for EpochHeader&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Epoch&gt;::SlotNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; UnwindSafe for EpochIdentifier&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IncrementedEpoch&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number, E&gt; UnwindSafe for EpochChanges&lt;Hash, Number, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Epoch&gt;::SlotNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpochIdentifierPosition","synthetic":true,"types":[]},{"text":"impl&lt;E, ERef&gt; UnwindSafe for ViableEpoch&lt;E, ERef&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ERef: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number, E&gt; UnwindSafe for ViableEpochDescriptor&lt;Hash, Number, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Epoch&gt;::SlotNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for PersistedEpoch&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for PersistedEpochHeader&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Epoch&gt;::SlotNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number, E&gt; UnwindSafe for EpochChangesV0&lt;Hash, Number, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus_manual_seal"] = [{"text":"impl&lt;B, F, CB&gt; !UnwindSafe for FinalizeBlockParams&lt;B, F, CB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, BI, SC, C, E, P&gt; !UnwindSafe for SealBlockParams&lt;'a, B, BI, SC, C, E, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, BI, E, C, A, SC, CS&gt; !UnwindSafe for ManualSealParams&lt;B, BI, E, C, A, SC, CS&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, BI, E, C, A, SC&gt; !UnwindSafe for InstantSealParams&lt;B, BI, E, C, A, SC&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; !UnwindSafe for BabeConsensusDataProvider&lt;B, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !UnwindSafe for Client&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !UnwindSafe for ManualSeal&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; UnwindSafe for CreatedBlock&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !UnwindSafe for EngineCommand&lt;Hash&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus_pow"] = [{"text":"impl&lt;Block, Algorithm, C&gt; !UnwindSafe for MiningWorker&lt;Block, Algorithm, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, D&gt; UnwindSafe for MiningMetadata&lt;H, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, Algorithm, C&gt; UnwindSafe for MiningBuild&lt;Block, Algorithm, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Algorithm as PowAlgorithm&lt;Block&gt;&gt;::Difficulty: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;C as ProvideRuntimeApi&lt;Block&gt;&gt;::Api as ApiExt&lt;Block&gt;&gt;::StateBackend as Backend&lt;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing&gt;&gt;::Transaction: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Difficulty&gt; UnwindSafe for PowIntermediate&lt;Difficulty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Difficulty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Difficulty&gt; UnwindSafe for PowAux&lt;Difficulty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Difficulty: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I, C, S, Algorithm, CAW&gt; !UnwindSafe for PowBlockImport&lt;B, I, C, S, Algorithm, CAW&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, Algorithm&gt; UnwindSafe for PowVerifier&lt;B, Algorithm&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Algorithm: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for Error&lt;B&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus_slots"] = [{"text":"impl UnwindSafe for SlotInfo","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for SlotResult&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SlotDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, S&gt; UnwindSafe for CheckedHeader&lt;H, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_executor"] = [{"text":"impl&lt;D&gt; !UnwindSafe for NativeExecutor&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WasmExecutor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmExecutionMethod","synthetic":true,"types":[]}];
implementors["sc_executor_common"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SupervisorFuncIndex","synthetic":true,"types":[]},{"text":"impl&lt;'a, FE&gt; !UnwindSafe for GuestExternals&lt;'a, FE&gt;","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; !UnwindSafe for SandboxInstance&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GuestEnvironment","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; !UnwindSafe for UnregisteredInstance&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; !UnwindSafe for Store&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstantiationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmModuleInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataSegmentsSnapshot","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for InvokeMethod&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["sc_executor_wasmi"] = [{"text":"impl UnwindSafe for WasmiRuntime","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WasmiInstance","synthetic":true,"types":[]}];
implementors["sc_finality_grandpa"] = [{"text":"impl&lt;H, N&gt; !UnwindSafe for SharedAuthoritySet&lt;H, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; UnwindSafe for AuthoritySet&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; UnwindSafe for FinalityProofFragment&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, Block&gt; !UnwindSafe for FinalityProofProvider&lt;B, Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for GrandpaJustificationSender&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for GrandpaJustificationStream&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Backend, Block, Client, SC&gt; !UnwindSafe for GrandpaBlockImport&lt;Backend, Block, Client, SC&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for GrandpaJustification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BE, Block, Client&gt; !UnwindSafe for GrandpaLightBlockImport&lt;BE, Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for BeforeBestBlockBy&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreeQuartersOfTheUnfinalizedChain","synthetic":true,"types":[]},{"text":"impl&lt;Block, B&gt; !UnwindSafe for VotingRulesBuilder&lt;Block, B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SharedVoterState","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, SC&gt; !UnwindSafe for LinkHalf&lt;Block, C, SC&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, N, SC, VR&gt; !UnwindSafe for GrandpaParams&lt;Block, C, N, SC, VR&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sc_finality_grandpa_rpc"] = [{"text":"impl&lt;AuthoritySet, VoterState, Block, ProofProvider&gt; !UnwindSafe for GrandpaRpcHandler&lt;AuthoritySet, VoterState, Block, ProofProvider&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Notification, Hash&gt; !UnwindSafe for Client&lt;Notification, Hash&gt;","synthetic":true,"types":[]}];
implementors["sc_informant"] = [{"text":"impl UnwindSafe for OutputFormat","synthetic":true,"types":[]}];
implementors["sc_keystore"] = [{"text":"impl UnwindSafe for LocalKeystore","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sc_light"] = [{"text":"impl&lt;S, H&gt; UnwindSafe for Backend&lt;S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, S&gt; UnwindSafe for ImportOperation&lt;Block, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for GenesisOrUnavailableState&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Blockchain&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, L&gt; UnwindSafe for GenesisCallExecutor&lt;B, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, H, B, S&gt; !UnwindSafe for LightDataChecker&lt;E, H, B, S&gt;","synthetic":true,"types":[]}];
implementors["sc_network"] = [{"text":"impl&lt;B&gt; UnwindSafe for PeerInfo&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; !UnwindSafe for NetworkService&lt;B, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; !UnwindSafe for NetworkWorker&lt;B, H&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for NotificationSender","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for NotificationSenderReady&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for NetworkStatus&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DhtEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObservedRole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyncState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestFailure","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for OnDemand&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlwaysBadChecker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ProtocolConfig","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IncomingRequest","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; !UnwindSafe for Params&lt;B, H&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DummyFinalityProofRequestBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmptyTransactionPool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtocolId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiaddrWithPeerId","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for NetworkConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Role","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransactionImport","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParseErr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransportConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NonReservedPeerMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeKeyConfig","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for Secret&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !UnwindSafe for QueuedSender&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, M&gt; !UnwindSafe for QueueGuard&lt;'a, M&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetworkState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Peer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotConnectedPeer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerEndpoint","synthetic":true,"types":[]}];
implementors["sc_network_gossip"] = [{"text":"impl&lt;B&gt; !UnwindSafe for GossipEngine&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicNotification","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiscardAll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageIntent","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for ValidationResult&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_network_test"] = [{"text":"impl UnwindSafe for PassThroughVerifier","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !UnwindSafe for Peer&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FullPeerConfig","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TestNet","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ForceFinalized","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for JustificationTestNet","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PeersClient","synthetic":true,"types":[]},{"text":"impl&lt;Transaction&gt; !UnwindSafe for BlockImportAdapter&lt;Transaction&gt;","synthetic":true,"types":[]}];
implementors["sc_offchain"] = [{"text":"impl&lt;Client, Storage, Block&gt; !UnwindSafe for OffchainWorkers&lt;Client, Storage, Block&gt;","synthetic":true,"types":[]}];
implementors["sc_peerset"] = [{"text":"impl UnwindSafe for ReputationChange","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PeersetHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IncomingIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeersetConfig","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Peerset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]}];
implementors["sc_proposer_metrics"] = [{"text":"impl UnwindSafe for MetricsLink","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metrics","synthetic":true,"types":[]}];
implementors["sc_rpc"] = [{"text":"impl !UnwindSafe for SubscriptionTaskExecutor","synthetic":true,"types":[]},{"text":"impl&lt;P, Client&gt; !UnwindSafe for Author&lt;P, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; !UnwindSafe for Chain&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Offchain&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; !UnwindSafe for State&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; !UnwindSafe for ChildState&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for System&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for Request&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TaskExecutor","synthetic":true,"types":[]}];
implementors["sc_rpc_api"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DenyUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Hash, BlockHash&gt; !UnwindSafe for Client&lt;Hash, BlockHash&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; UnwindSafe for ExtrinsicOrHash&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash, Header, SignedBlock&gt; !UnwindSafe for Client&lt;Number, Hash, Header, SignedBlock&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !UnwindSafe for Client&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; UnwindSafe for ReadProof&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !UnwindSafe for Client&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; !UnwindSafe for Client&lt;Hash, Number&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SystemInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Health","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; UnwindSafe for PeerInfo&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number&gt; UnwindSafe for SyncState&lt;Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeRole","synthetic":true,"types":[]}];
implementors["sc_rpc_server"] = [{"text":"impl !UnwindSafe for RpcMiddleware","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RpcMetrics","synthetic":true,"types":[]}];
implementors["sc_service"] = [{"text":"impl&lt;'a, TBl, TExPool, TImpQu, TCl&gt; !UnwindSafe for BuildNetworkParams&lt;'a, TBl, TExPool, TImpQu, TCl&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for KeystoreContainer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for NetworkStarter","synthetic":true,"types":[]},{"text":"impl&lt;'a, TBl, TCl, TExPool, TRpc, Backend&gt; !UnwindSafe for SpawnTasksParams&lt;'a, TBl, TCl, TExPool, TRpc, Backend&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for NoopRpcExtensionBuilder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SpawnTaskHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TaskManager","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RpcHandlers","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !UnwindSafe for NetworkStatusSinks&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TelemetryConnectionSinks","synthetic":true,"types":[]},{"text":"impl&lt;Client, Backend, SelectChain, ImportQueue, TransactionPool, Other&gt; !UnwindSafe for PartialComponents&lt;Client, Backend, SelectChain, ImportQueue, TransactionPool, Other&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RpcSession","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; UnwindSafe for TransactionPoolAdapter&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffchainWorkerConfig","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PrometheusConfig","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TaskType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeystoreConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpcMethods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasePath","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;B, E&gt; !UnwindSafe for LocalCallExecutor&lt;B, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, E, Block, RA&gt; !UnwindSafe for Client&lt;B, E, Block, RA&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientConfig","synthetic":true,"types":[]}];
implementors["sc_service_test"] = [{"text":"impl&lt;TBl, TBackend, TExec, TRtApi, TExPool&gt; !UnwindSafe for TestNetComponents&lt;TBl, TBackend, TExec, TRtApi, TExPool&gt;","synthetic":true,"types":[]}];
implementors["sc_state_db"] = [{"text":"impl&lt;H&gt; UnwindSafe for ChangeSet&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for CommitSet&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraints","synthetic":true,"types":[]},{"text":"impl&lt;BlockHash, Key&gt; UnwindSafe for StateDb&lt;BlockHash, Key&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockHash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PinError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PruningMode","synthetic":true,"types":[]}];
implementors["sc_sync_state_rpc"] = [{"text":"impl&lt;TBl, TCl&gt; !UnwindSafe for SyncStateRpcHandler&lt;TBl, TCl&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]}];
implementors["sc_telemetry"] = [{"text":"impl UnwindSafe for TelemetryConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TelemetryEndpoints","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Telemetry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TelemetryEvent","synthetic":true,"types":[]}];
implementors["sc_tracing"] = [{"text":"impl !UnwindSafe for ProfilingLayer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraceEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpanDatum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Values","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogTraceHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TelemetryTraceHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TracingReceiver","synthetic":true,"types":[]}];
implementors["sc_transaction_graph"] = [{"text":"impl&lt;B&gt; !UnwindSafe for Pool&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex, Error&gt; UnwindSafe for ValidatedTransaction&lt;Hash, Ex, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; UnwindSafe for PruneStatus&lt;Hash, Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Extrinsic&gt; UnwindSafe for Transaction&lt;Hash, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Extrinsic: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; !UnwindSafe for BasePool&lt;Hash, Ex&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limit","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; UnwindSafe for Imported&lt;Hash, Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, BH&gt; !UnwindSafe for Watcher&lt;H, BH&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, BH&gt; !UnwindSafe for Sender&lt;H, BH&gt;","synthetic":true,"types":[]}];
implementors["sc_transaction_pool"] = [{"text":"impl&lt;Client, Block&gt; UnwindSafe for FullChainApi&lt;Client, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Client, F, Block&gt; UnwindSafe for LightChainApi&lt;Client, F, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PoolApi, Block&gt; !UnwindSafe for BasicPool&lt;PoolApi, Block&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RevalidationType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["schnorrkel"] = [{"text":"impl UnwindSafe for RistrettoBoth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MiniSecretKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecretKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Keypair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpansionMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigningContext","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for XoFTranscript&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; UnwindSafe for SigningTranscriptWithRng&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Malleable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VRFOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VRFInOut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VRFProof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VRFProofBatchable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChainCode","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for ExtendedKey&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECQVCertSecret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECQVCertPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiSignatureStage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureError","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; UnwindSafe for AggregatePublicKeySlice&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Commitment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reveal","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for MuSig&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for CommitStage&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for RevealStage&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CosignStage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cosignature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CollectStage","synthetic":true,"types":[]}];
implementors["secp256k1"] = [{"text":"impl UnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecretKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecoveryId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for SharedSecret&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as Digest&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicKeyFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Affine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Jacobian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AffineStorage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scalar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECMultContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECMultGenContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureArray","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; UnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; UnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; UnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl UnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["sharded_slab"] = [{"text":"impl UnwindSafe for DefaultConfig","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; UnwindSafe for Pool&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; !UnwindSafe for PoolGuard&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; UnwindSafe for Slab&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&nbsp;=&nbsp;DefaultConfig&gt; !UnwindSafe for Guard&lt;'a, T, C&gt;","synthetic":true,"types":[]}];
implementors["signature"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; UnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_allocator"] = [{"text":"impl UnwindSafe for FreeingBumpHeapAllocator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_api"] = [{"text":"impl&lt;'a, Block, C, NC, Backend&gt; !UnwindSafe for CallApiAtParams&lt;'a, Block, C, NC, Backend&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ApiRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OldRuntimeVersion","synthetic":true,"types":[]},{"text":"impl&lt;'a, Block&gt; !UnwindSafe for InitializeBlock&lt;'a, Block&gt;","synthetic":true,"types":[]}];
implementors["sp_application_crypto"] = [{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pair","synthetic":true,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl UnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Percent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerU16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Permill","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Perbill","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Perquintill","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedI64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedI128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedU128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RationalInfinite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rational128","synthetic":true,"types":[]}];
implementors["sp_authorship"] = [{"text":"impl&lt;F, H&gt; UnwindSafe for InherentDataProvider&lt;F, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InherentError","synthetic":true,"types":[]}];
implementors["sp_blockchain"] = [{"text":"impl&lt;Block&gt; UnwindSafe for Info&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for HashAndNumber&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for TreeRoute&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for HeaderMetadataCache&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for CachedHeaderMetadata&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ApplyExtrinsicFailed","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockStatus","synthetic":true,"types":[]}];
implementors["sp_chain_spec"] = [{"text":"impl UnwindSafe for ChainType","synthetic":true,"types":[]}];
implementors["sp_consensus"] = [{"text":"impl&lt;Block, Transaction&gt; UnwindSafe for Proposal&lt;Block, Transaction&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoNetwork","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CanAuthorWithNativeVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlwaysCanAuthor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NeverCanAuthor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordProof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultBlockAnnounceValidator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Validation","synthetic":true,"types":[]},{"text":"impl&lt;AuthorityId&gt; UnwindSafe for OfflineTracker&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportedAux","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for BlockCheckParams&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, Transaction&gt; !UnwindSafe for BlockImportParams&lt;Block, Transaction&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockOrigin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForkChoiceStrategy","synthetic":true,"types":[]},{"text":"impl&lt;B, Transaction&gt; !UnwindSafe for BasicQueue&lt;B, Transaction&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for IncomingBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Extrinsic: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for BlockImportResult&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BlockImportError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for BufferedLinkSender&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for BufferedLinkReceiver&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_consensus_aura"] = [{"text":"impl&lt;AuthorityId&gt; UnwindSafe for ConsensusLog&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InherentDataProvider","synthetic":true,"types":[]}];
implementors["sp_consensus_babe"] = [{"text":"impl UnwindSafe for BabeGenesisConfigurationV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BabeGenesisConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BabeEpochConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueKeyOwnershipProof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConsensusLog","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedSlots","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrimaryPreDigest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondaryPlainPreDigest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondaryVRFPreDigest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NextEpochDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreDigest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NextConfigDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InherentDataProvider","synthetic":true,"types":[]}];
implementors["sp_consensus_slots"] = [{"text":"impl&lt;Header, Id&gt; UnwindSafe for EquivocationProof&lt;Header, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_consensus_vrf"] = [{"text":"impl UnwindSafe for VRFOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VRFProof","synthetic":true,"types":[]}];
implementors["sp_core"] = [{"text":"impl UnwindSafe for ChangesTrieConfiguration","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash&gt; UnwindSafe for ChangesTrieConfigurationRange&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Blake2Hasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeccakHasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaquePeerId","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ExecutionContext","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for NativeOrEncoded&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NeverNativeValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Void","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for HexDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccountId32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dummy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyTypeId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CryptoTypeId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CryptoTypePublicPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Infallible","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecretStringError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveJunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ss58AddressFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _5","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _14","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _15","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _17","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _18","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _19","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _20","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _21","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _22","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _23","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _24","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _25","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _26","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _27","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _28","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _29","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _30","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _31","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _33","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _34","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _35","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _36","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _37","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _38","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _39","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _40","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _41","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _42","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _43","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _44","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _45","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _46","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _47","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _48","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _49","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _50","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _51","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _52","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _53","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _54","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _55","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _56","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _57","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _58","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _59","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _60","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _61","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _62","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _63","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _65","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _66","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _67","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _68","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _69","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _70","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _71","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _72","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _73","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _74","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _75","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _76","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _77","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _78","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _79","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _80","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _81","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _82","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _83","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _84","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _85","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _86","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _87","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _88","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _89","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _90","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _91","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _92","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _93","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _94","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _95","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _96","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _97","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _98","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _99","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _100","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _112","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _160","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _192","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalizedSignature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalizedSignature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpRequestId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueNetworkState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueMultiaddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Capabilities","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LimitedExternalities&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OffchainExt","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TransactionPoolExt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpRequestStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InMemOffchainStorage","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for OffchainOverlayedChangesIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffchainOverlayedChangesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; UnwindSafe for OffchainOverlayedChangesDrain&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffchainOverlayedChange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffchainOverlayedChanges","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PendingRequest","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TestPersistentOffchainDB","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OffchainState","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TestOffchainExt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PoolState","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TestTransactionPoolExt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnvironmentDefinition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExternEntity","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WrappedRuntimeCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoneFetchRuntimeCode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RuntimeCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CodeNotFound","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CallInWasmExt","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TaskExecutorExt","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RuntimeSpawnExt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MissingHostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TaskExecutor","synthetic":true,"types":[]}];
implementors["sp_database"] = [{"text":"impl&lt;H&gt; UnwindSafe for MemDb&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for Transaction&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for Change&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; UnwindSafe for ChangeRef&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DatabaseError","synthetic":true,"types":[]}];
implementors["sp_externalities"] = [{"text":"impl !UnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_finality_grandpa"] = [{"text":"impl&lt;N&gt; UnwindSafe for ScheduledChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; UnwindSafe for EquivocationProof&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VersionedAuthorityList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueKeyOwnershipProof","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for ConsensusLog&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; UnwindSafe for Equivocation&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_inherents"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InherentData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckInherentsResult","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InherentDataProviders","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for MakeFatalError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_io"] = [{"text":"impl !UnwindSafe for VerificationExt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Crossing&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaVerifyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]}];
implementors["sp_keyring"] = [{"text":"impl UnwindSafe for KeyringIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseKeyringError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Keyring","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyringIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Keyring","synthetic":true,"types":[]}];
implementors["sp_keystore"] = [{"text":"impl !UnwindSafe for KeystoreExt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for KeyStore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VRFTranscriptData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VRFSignature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VRFTranscriptValue","synthetic":true,"types":[]}];
implementors["sp_npos_elections"] = [{"text":"impl&lt;AccountId&gt; UnwindSafe for Candidate&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; !UnwindSafe for Edge&lt;AccountId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; !UnwindSafe for Voter&lt;AccountId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, P&gt; UnwindSafe for ElectionResult&lt;AccountId, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, P&gt; UnwindSafe for Assignment&lt;AccountId, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for StakedAssignment&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; UnwindSafe for Support&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_panic_handler"] = [{"text":"impl UnwindSafe for AbortGuard","synthetic":true,"types":[]}];
implementors["sp_rpc"] = [{"text":"impl UnwindSafe for TryFromIntError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NumberOrHex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ListOrValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl&lt;Hash&gt; UnwindSafe for Digest&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnySignature","synthetic":true,"types":[]},{"text":"impl&lt;Info&gt; UnwindSafe for DispatchErrorWithPostInfo&lt;Info&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueExtrinsic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureBatching","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuntimeString","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; UnwindSafe for DigestItem&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiSignature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiSigner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DispatchError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for TransactionOutcome&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PiecewiseLinear&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Address, Call, Signature, Extra&gt; UnwindSafe for UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Signature: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Call, Extra&gt; UnwindSafe for SignedPayload&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Extra as SignedExtension&gt;::AdditionalSigned: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Call, Extra&gt; UnwindSafe for CheckedExtrinsic&lt;AccountId, Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash&gt; UnwindSafe for Header&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Hash as Hash&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header, Extrinsic&gt; UnwindSafe for Block&lt;Header, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Extrinsic: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for SignedBlock&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Era","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; UnwindSafe for BlockId&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Hash&gt; UnwindSafe for DigestItemRef&lt;'a, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for OpaqueDigestItemId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangesTrieSignal","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Request&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PendingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseBody","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Headers","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for HeadersIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StorageValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for BlockAndTimeDeadline&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as BlockNumberProvider&gt;::BlockNumber: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for BlockAndTime&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; UnwindSafe for StorageLock&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, L&gt; !UnwindSafe for StorageLockGuard&lt;'a, 'b, L&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintAuthorityId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestSignature","synthetic":true,"types":[]},{"text":"impl&lt;Xt&gt; UnwindSafe for ExtrinsicWrapper&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Xt&gt; UnwindSafe for Block&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Call, Extra&gt; UnwindSafe for TestXt&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BadOrigin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LookupError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IdentityLookup&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConvertInto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlakeTwo256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Keccak256","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for AppendZerosInput&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TrailingZeroInput&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValidTransaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValidTransactionBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidTransaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnknownTransaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransactionValidityError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransactionSource","synthetic":true,"types":[]},{"text":"impl&lt;Hashing&gt; UnwindSafe for RandomNumberGenerator&lt;Hashing&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Hashing as Hash&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime_interface"] = [{"text":"impl&lt;T&gt; UnwindSafe for ExchangeableFunction&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RestoreImplementation&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; UnwindSafe for WrappedFFIValue&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Codec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Inner&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Enum&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime_interface_test_wasm"] = [{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]}];
implementors["sp_runtime_interface_test_wasm_deprecated"] = [{"text":"impl UnwindSafe for HostFunctions","synthetic":true,"types":[]}];
implementors["sp_sandbox"] = [{"text":"impl !UnwindSafe for Memory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for EnvironmentDefinitionBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Instance&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_session"] = [{"text":"impl UnwindSafe for MembershipProof","synthetic":true,"types":[]}];
implementors["sp_staking"] = [{"text":"impl&lt;Reporter, Offender&gt; UnwindSafe for OffenceDetails&lt;Reporter, Offender&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Reporter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffenceError","synthetic":true,"types":[]}];
implementors["sp_state_machine"] = [{"text":"impl&lt;H, N&nbsp;=&nbsp;u64&gt; !UnwindSafe for TestExternalities&lt;H, N&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BasicExternalities","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, B&gt; UnwindSafe for ReadOnlyExternalities&lt;'a, H, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; UnwindSafe for AnchorBlockId&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, Number&gt; !UnwindSafe for State&lt;'a, H, Number&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, Number&gt; UnwindSafe for InMemoryStorage&lt;H, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; UnwindSafe for BuildCache&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; UnwindSafe for ConfigurationRange&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, H&gt; !UnwindSafe for ProvingBackend&lt;'a, S, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, H&gt; !UnwindSafe for ProvingBackendRecorder&lt;'a, S, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, H, N, Exec&gt; !UnwindSafe for StateMachine&lt;'a, B, H, N, Exec&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OverlayedChanges","synthetic":true,"types":[]},{"text":"impl&lt;Transaction, H, N&gt; UnwindSafe for StorageChanges&lt;Transaction, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Transaction, H, N&gt; UnwindSafe for StorageTransactionCache&lt;Transaction, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, H&gt; UnwindSafe for TrieBackend&lt;S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsageInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsageUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StateMachineStats","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, N, B&gt; !UnwindSafe for Ext&lt;'a, H, N, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; UnwindSafe for CacheAction&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecutionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecutionStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackendTrustLevel","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for ExecutionManager&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, H&gt; UnwindSafe for BackendRuntimeCode&lt;'a, B, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_std"] = [{"text":"impl UnwindSafe for Writer","synthetic":true,"types":[]}];
implementors["sp_storage"] = [{"text":"impl UnwindSafe for StorageKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrackedStorageKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrefixedStorageKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageChild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Storage","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; UnwindSafe for StorageChangeSet&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChildTrieParentKeyId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChildInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChildType","synthetic":true,"types":[]}];
implementors["sp_tasks"] = [{"text":"impl !UnwindSafe for AsyncExternalities","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DataJoinHandle","synthetic":true,"types":[]}];
implementors["sp_test_primitives"] = [{"text":"impl UnwindSafe for Extrinsic","synthetic":true,"types":[]}];
implementors["sp_timestamp"] = [{"text":"impl UnwindSafe for InherentDataProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InherentError","synthetic":true,"types":[]}];
implementors["sp_tracing"] = [{"text":"impl UnwindSafe for WasmMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmEntryAttributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmValuesSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmFields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmFieldName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmLevel","synthetic":true,"types":[]}];
implementors["sp_transaction_pool"] = [{"text":"impl UnwindSafe for PoolStatus","synthetic":true,"types":[]},{"text":"impl&lt;Hash, BlockHash&gt; UnwindSafe for TransactionStatus&lt;Hash, BlockHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockHash: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ChainEvent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_trie"] = [{"text":"impl UnwindSafe for TrieStream","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for NodeCodec&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageProof","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for Layout&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB, H&gt; UnwindSafe for KeySpacedDB&lt;'a, DB, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB, H&gt; !UnwindSafe for KeySpacedDBMut&lt;'a, DB, H&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_utils"] = [{"text":"impl UnwindSafe for TOKIO_THREADS_TOTAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TOKIO_THREADS_ALIVE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UNBOUNDED_CHANNELS_COUNTER","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for TracingUnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for TracingUnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for StatusSinks&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ReadySinkEvent&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["sp_version"] = [{"text":"impl UnwindSafe for RuntimeVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NativeVersion","synthetic":true,"types":[]}];
implementors["sp_wasm_interface"] = [{"text":"impl&lt;T&gt; UnwindSafe for Pointer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnValue","synthetic":true,"types":[]}];
implementors["subkey"] = [{"text":"impl UnwindSafe for Subkey","synthetic":true,"types":[]}];
implementors["submit_solution"] = [{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Test","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistentialDeposit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionKeys","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestSessionHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RewardCurve","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxNominatorRewardedPerValidator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxIterations","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OriginCaller","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Call","synthetic":true,"types":[]}];
implementors["substrate_bip39"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["substrate_browser_utils"] = [{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]}];
implementors["substrate_frame_cli"] = [{"text":"impl UnwindSafe for ModuleIdCmd","synthetic":true,"types":[]}];
implementors["substrate_frame_rpc_support"] = [{"text":"impl&lt;V&gt; UnwindSafe for StorageQuery&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["substrate_frame_rpc_system"] = [{"text":"impl&lt;BlockHash, AccountId, Index&gt; !UnwindSafe for Client&lt;BlockHash, AccountId, Index&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P, C, B&gt; UnwindSafe for FullSystem&lt;P, C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C, F, Block&gt; !UnwindSafe for LightSystem&lt;P, C, F, Block&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["substrate_test_client"] = [{"text":"impl&lt;Block, Executor, Backend, G&gt; !UnwindSafe for TestClientBuilder&lt;Block, Executor, Backend, G&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RpcTransactionOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpcTransactionError","synthetic":true,"types":[]}];
implementors["substrate_test_runtime"] = [{"text":"impl UnwindSafe for Transfer","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DecodeFails&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockHashCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumBlockWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DbWeight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaximumBlockLength","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AvailableBlockRatio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpochDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpectedBlockTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SessionKeys","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuntimeApi","synthetic":true,"types":[]},{"text":"impl&lt;Block, C&gt; !UnwindSafe for RuntimeApiImpl&lt;Block, C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extrinsic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OriginCaller","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockExecutor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["substrate_test_runtime_client"] = [{"text":"impl UnwindSafe for LocalExecutor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenesisParameters","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LightFetcher","synthetic":true,"types":[]}];
implementors["substrate_test_runtime_transaction_pool"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChainState","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TestApi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsBestBlock","synthetic":true,"types":[]}];
implementors["substrate_wasm_builder_runner"] = [{"text":"impl UnwindSafe for WasmBuilderSelectProject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmBuilderSelectSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WasmBuilderSource","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl UnwindSafe for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; UnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !UnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["tiny_keccak"] = [{"text":"impl UnwindSafe for Keccak","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;T&gt; UnwindSafe for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl !UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WithDispatch&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Instrumented&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entered&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl !UnwindSafe for Dispatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Current","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interest","synthetic":true,"types":[]}];
implementors["tracing_log"] = [{"text":"impl UnwindSafe for LogTracer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]}];
implementors["tracing_serde"] = [{"text":"impl !UnwindSafe for SerializeField","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SerializeFieldSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SerializeLevel&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SerializeId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SerializeMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SerializeEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SerializeAttributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SerializeRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SerdeMapVisitor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as SerializeMap&gt;::Error: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SerdeStructVisitor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as SerializeStruct&gt;::Error: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for SerializeFieldMap&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing_subscriber"] = [{"text":"impl UnwindSafe for EnvFilter","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CurrentSpan","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for Alt&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, V&gt; UnwindSafe for Delimited&lt;D, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, V&gt; UnwindSafe for VisitDelimited&lt;D, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for Messages&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Directive","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BadName","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FromEnvError","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, N&gt; UnwindSafe for FmtContext&lt;'a, S, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for FormattedFields&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, N, E, W&gt; UnwindSafe for Layer&lt;S, N, E, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestWriter","synthetic":true,"types":[]},{"text":"impl&lt;N&nbsp;=&nbsp;DefaultFields, E&nbsp;=&nbsp;Format&lt;Full, SystemTime&gt;, F&nbsp;=&nbsp;LevelFilter, W&nbsp;=&nbsp;fn() -&gt; Stdout&gt; !UnwindSafe for Subscriber&lt;N, E, F, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&nbsp;=&nbsp;DefaultFields, E&nbsp;=&nbsp;Format&lt;Full, SystemTime&gt;, F&nbsp;=&nbsp;LevelFilter, W&nbsp;=&nbsp;fn() -&gt; Stdout&gt; !UnwindSafe for SubscriberBuilder&lt;N, E, F, W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Json","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JsonFields","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for JsonVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FieldFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !UnwindSafe for FieldFnVisitor&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compact","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Full","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; UnwindSafe for Format&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultFields","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for DefaultVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FmtSpan","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SystemTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uptime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChronoUtc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChronoLocal","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BoxMakeWriter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for Context&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, I, S&gt; UnwindSafe for Layered&lt;L, I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; UnwindSafe for Scope&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as LookupSpan&lt;'a&gt;&gt;::Data: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Extensions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ExtensionsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; UnwindSafe for SpanRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as LookupSpan&lt;'a&gt;&gt;::Data: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; UnwindSafe for Parents&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; UnwindSafe for FromRoot&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as LookupSpan&lt;'a&gt;&gt;::Data: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, S&gt; UnwindSafe for Layer&lt;L, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, S&gt; UnwindSafe for Handle&lt;L, S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TryInitError","synthetic":true,"types":[]}];
implementors["trie_db"] = [{"text":"impl&lt;'db, L&gt; !UnwindSafe for FatDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !UnwindSafe for FatDBIterator&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !UnwindSafe for FatDBMut&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L, Q&gt; !UnwindSafe for Lookup&lt;'a, L, Q&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for NibbleSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NibbleVec","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, HO, V, DB&gt; !UnwindSafe for TrieBuilder&lt;'a, H, HO, V, DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, HO&gt; UnwindSafe for TrieRoot&lt;H, HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for TrieRootUnhashed&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !UnwindSafe for TrieDBNodeIterator&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, HO&gt; UnwindSafe for TrieRootPrint&lt;H, HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; UnwindSafe for TrieFactory&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for TrieError&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrieSpec","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !UnwindSafe for TrieKinds&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NibbleSlicePlan","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for OwnedNode&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for NodeHandle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Node&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeHandlePlan","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodePlan","synthetic":true,"types":[]},{"text":"impl&lt;HO, CE&gt; UnwindSafe for Error&lt;HO, CE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CE: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !UnwindSafe for TrieDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !UnwindSafe for TrieDBIterator&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !UnwindSafe for TrieDBMut&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; UnwindSafe for ChildReference&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !UnwindSafe for SecTrieDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !UnwindSafe for SecTrieDBMut&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; UnwindSafe for Record&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; UnwindSafe for Recorder&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["twox_hash"] = [{"text":"impl UnwindSafe for RandomXxHashBuilder64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RandomXxHashBuilder32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XxHash64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XxHash32","synthetic":true,"types":[]}];
implementors["uint"] = [{"text":"impl UnwindSafe for FromDecStrErr","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; UnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["wasmi"] = [{"text":"impl !UnwindSafe for Trap","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FuncInstance","synthetic":true,"types":[]},{"text":"impl&lt;'args&gt; !UnwindSafe for FuncInvocation&lt;'args&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FuncRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalInstance","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GlobalRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NopExternals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RuntimeArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ImportsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryInstance","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MemoryRef","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ModuleInstance","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ModuleRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for NotStartedModuleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StackRecycler","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TableInstance","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TableRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TrapKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResumableError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ExternVal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuntimeValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F64","synthetic":true,"types":[]}];
implementors["wasmi_validation"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlainValidator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlainFuncValidator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StackWithLimit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleContextBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FunctionValidationContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StartedWith","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StackValueType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Locals&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()