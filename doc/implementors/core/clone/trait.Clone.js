(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Clone for Adler32","synthetic":false,"types":[]}];
implementors["ahash"] = [{"text":"impl Clone for AHasher","synthetic":false,"types":[]},{"text":"impl Clone for ABuildHasher","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S:&nbsp;Clone + StateID&gt; Clone for AhoCorasick&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Searcher","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Clone for Prefix","synthetic":false,"types":[]},{"text":"impl Clone for Infix","synthetic":false,"types":[]},{"text":"impl Clone for Suffix","synthetic":false,"types":[]},{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Colour","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + ToOwned + ?Sized&gt; Clone for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&lt;Item = u8&gt; + Copy&gt; Clone for ArrayString&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CapacityError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Clone for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Clone for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["backtrace"] = [{"text":"impl Clone for Frame","synthetic":false,"types":[]},{"text":"impl Clone for PrintFmt","synthetic":false,"types":[]},{"text":"impl Clone for Backtrace","synthetic":false,"types":[]},{"text":"impl Clone for BacktraceFrame","synthetic":false,"types":[]},{"text":"impl Clone for BacktraceSymbol","synthetic":false,"types":[]}];
implementors["bip39"] = [{"text":"impl Clone for Language","synthetic":false,"types":[]},{"text":"impl Clone for Mnemonic","synthetic":false,"types":[]},{"text":"impl Clone for MnemonicType","synthetic":false,"types":[]},{"text":"impl Clone for Seed","synthetic":false,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BitIdx&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BitPos&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for BitMask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Msb0","synthetic":false,"types":[]},{"text":"impl Clone for Lsb0","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Iter&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Split&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(usize, &amp;bool) -&gt; bool,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for RSplit&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(usize, &amp;bool) -&gt; bool,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, O:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Clone for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Clone for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["blake2_rfc"] = [{"text":"impl Clone for Blake2bResult","synthetic":false,"types":[]},{"text":"impl Clone for Blake2b","synthetic":false,"types":[]},{"text":"impl Clone for Blake2sResult","synthetic":false,"types":[]},{"text":"impl Clone for Blake2s","synthetic":false,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize:&nbsp;Clone + ArrayLength&lt;u8&gt;&gt; Clone for BlockBuffer&lt;BlockSize&gt;","synthetic":false,"types":[]}];
implementors["block_padding"] = [{"text":"impl Clone for PadError","synthetic":false,"types":[]},{"text":"impl Clone for UnpadError","synthetic":false,"types":[]}];
implementors["byte_slice_cast"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FixedOffset","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Utc","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDate","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Clone for IsoWeek","synthetic":false,"types":[]},{"text":"impl Clone for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Pad","synthetic":false,"types":[]},{"text":"impl Clone for Numeric","synthetic":false,"types":[]},{"text":"impl Clone for InternalNumeric","synthetic":false,"types":[]},{"text":"impl Clone for Fixed","synthetic":false,"types":[]},{"text":"impl Clone for InternalFixed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Item&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for Parsed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for StrftimeItems&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RoundingError","synthetic":false,"types":[]},{"text":"impl Clone for Weekday","synthetic":false,"types":[]},{"text":"impl Clone for ParseWeekdayError","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Clone for MacError","synthetic":false,"types":[]},{"text":"impl Clone for InvalidKeyLength","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone + ArrayLength&lt;u8&gt;&gt; Clone for MacResult&lt;N&gt;","synthetic":false,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl Clone for Scalar","synthetic":false,"types":[]},{"text":"impl Clone for MontgomeryPoint","synthetic":false,"types":[]},{"text":"impl Clone for CompressedEdwardsY","synthetic":false,"types":[]},{"text":"impl Clone for EdwardsPoint","synthetic":false,"types":[]},{"text":"impl Clone for EdwardsBasepointTable","synthetic":false,"types":[]},{"text":"impl Clone for CompressedRistretto","synthetic":false,"types":[]},{"text":"impl Clone for RistrettoPoint","synthetic":false,"types":[]},{"text":"impl Clone for RistrettoBasepointTable","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Clone for Box&lt;dyn DynDigest&gt;","synthetic":false,"types":[]},{"text":"impl Clone for InvalidOutputSize","synthetic":false,"types":[]}];
implementors["ed25519"] = [{"text":"impl Clone for Signature","synthetic":false,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl Clone for PublicKey","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["ethbloom"] = [{"text":"impl Clone for Bloom","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BloomRef&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["ethereum_types"] = [{"text":"impl Clone for H32","synthetic":false,"types":[]},{"text":"impl Clone for H64","synthetic":false,"types":[]},{"text":"impl Clone for H128","synthetic":false,"types":[]},{"text":"impl Clone for H264","synthetic":false,"types":[]},{"text":"impl Clone for H520","synthetic":false,"types":[]},{"text":"impl Clone for U64","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for Compat&lt;E&gt;","synthetic":false,"types":[]}];
implementors["fake_simd"] = [{"text":"impl Clone for u32x4","synthetic":false,"types":[]},{"text":"impl Clone for u64x2","synthetic":false,"types":[]}];
implementors["frame_metadata"] = [{"text":"impl&lt;B:&nbsp;Clone, O:&nbsp;Clone&gt; Clone for DecodeDifferent&lt;B, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for FunctionMetadata","synthetic":false,"types":[]},{"text":"impl Clone for FunctionArgumentMetadata","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for FnEncode&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encode + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OuterEventMetadata","synthetic":false,"types":[]},{"text":"impl Clone for EventMetadata","synthetic":false,"types":[]},{"text":"impl Clone for StorageEntryMetadata","synthetic":false,"types":[]},{"text":"impl Clone for ModuleConstantMetadata","synthetic":false,"types":[]},{"text":"impl Clone for ErrorMetadata","synthetic":false,"types":[]},{"text":"impl Clone for DefaultByteGetter","synthetic":false,"types":[]},{"text":"impl Clone for StorageHasher","synthetic":false,"types":[]},{"text":"impl Clone for StorageEntryType","synthetic":false,"types":[]},{"text":"impl Clone for StorageEntryModifier","synthetic":false,"types":[]},{"text":"impl Clone for StorageMetadata","synthetic":false,"types":[]},{"text":"impl Clone for ModuleMetadata","synthetic":false,"types":[]}];
implementors["frame_support_procedural_tools"] = [{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Braces&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Brackets&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone&gt; Clone for Parens&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NoTrailing","synthetic":false,"types":[]},{"text":"impl Clone for Trailing","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, T:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for PunctuatedInner&lt;P, T, V&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Clone for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Canceled","synthetic":false,"types":[]}];
implementors["futures_executor"] = [{"text":"impl Clone for LocalSpawner","synthetic":false,"types":[]},{"text":"impl Clone for ThreadPool","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Clone for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for OptionFuture&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ready&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for Either&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Clone&gt; Clone for Abortable&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AbortHandle","synthetic":false,"types":[]},{"text":"impl Clone for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;Si:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for SinkMapErr&lt;Si, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Cursor&lt;T&gt;","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;Clone, N&gt; Clone for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, N&gt; Clone for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Clone for Format","synthetic":false,"types":[]},{"text":"impl Clone for Encoding","synthetic":false,"types":[]},{"text":"impl Clone for LineEncoding","synthetic":false,"types":[]},{"text":"impl Clone for Register","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAbbrevOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAddrBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAddrIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugInfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLineOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLineStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocationListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLocListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLocListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugMacinfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugMacroOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RangeListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugRngListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugRngListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffsetsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffsetsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugTypesOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DebugTypeSignature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for EhFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UnitSectionOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SectionId","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for X86","synthetic":false,"types":[]},{"text":"impl Clone for X86_64","synthetic":false,"types":[]},{"text":"impl Clone for DwUt","synthetic":false,"types":[]},{"text":"impl Clone for DwCfa","synthetic":false,"types":[]},{"text":"impl Clone for DwChildren","synthetic":false,"types":[]},{"text":"impl Clone for DwTag","synthetic":false,"types":[]},{"text":"impl Clone for DwAt","synthetic":false,"types":[]},{"text":"impl Clone for DwForm","synthetic":false,"types":[]},{"text":"impl Clone for DwAte","synthetic":false,"types":[]},{"text":"impl Clone for DwLle","synthetic":false,"types":[]},{"text":"impl Clone for DwDs","synthetic":false,"types":[]},{"text":"impl Clone for DwEnd","synthetic":false,"types":[]},{"text":"impl Clone for DwAccess","synthetic":false,"types":[]},{"text":"impl Clone for DwVis","synthetic":false,"types":[]},{"text":"impl Clone for DwVirtuality","synthetic":false,"types":[]},{"text":"impl Clone for DwLang","synthetic":false,"types":[]},{"text":"impl Clone for DwAddr","synthetic":false,"types":[]},{"text":"impl Clone for DwId","synthetic":false,"types":[]},{"text":"impl Clone for DwCc","synthetic":false,"types":[]},{"text":"impl Clone for DwInl","synthetic":false,"types":[]},{"text":"impl Clone for DwOrd","synthetic":false,"types":[]},{"text":"impl Clone for DwDsc","synthetic":false,"types":[]},{"text":"impl Clone for DwIdx","synthetic":false,"types":[]},{"text":"impl Clone for DwDefaulted","synthetic":false,"types":[]},{"text":"impl Clone for DwLns","synthetic":false,"types":[]},{"text":"impl Clone for DwLne","synthetic":false,"types":[]},{"text":"impl Clone for DwLnct","synthetic":false,"types":[]},{"text":"impl Clone for DwMacro","synthetic":false,"types":[]},{"text":"impl Clone for DwRle","synthetic":false,"types":[]},{"text":"impl Clone for DwOp","synthetic":false,"types":[]},{"text":"impl Clone for DwEhPe","synthetic":false,"types":[]},{"text":"impl Clone for RunTimeEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]},{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugAddr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for EhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for ParsedEhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Clone + Reader&gt; Clone for EhHdrTable&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for EhFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BaseAddresses","synthetic":false,"types":[]},{"text":"impl Clone for SectionBaseAddresses","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Augmentation","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UninitializedUnwindContext&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UnwindContext&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'iter, R:&nbsp;Clone&gt; Clone for RegisterRuleIter&lt;'iter, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UnwindTableRow&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CfaRule&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for RegisterRule&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CallFrameInstruction&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Clone + Reader&gt; Clone for CallFrameInstructionIter&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Pointer","synthetic":false,"types":[]},{"text":"impl&lt;'input, Endian:&nbsp;Clone&gt; Clone for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ReaderOffsetId","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugAbbrev&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Abbreviations","synthetic":false,"types":[]},{"text":"impl Clone for Abbreviation","synthetic":false,"types":[]},{"text":"impl Clone for AttributeSpecification","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Copy&gt; Clone for ArangeEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugAranges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for ArangeEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLine&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Program:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: LineProgram&lt;R, Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LineInstructions&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LineRow","synthetic":false,"types":[]},{"text":"impl Clone for ColumnType","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LineSequence&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for FileEntryFormat","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLoc&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLocLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for LocationLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LocationListEntry&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DieReference&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for Expression&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for OperationIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugPubNames&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubNamesEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugPubTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubTypesEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugRanges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugRngLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for RangeLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawRngListEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Range","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugStrOffsets&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLineStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UnitOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugInfo&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CompilationUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for Attribute&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R:&nbsp;Clone + Reader&gt; Clone for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesCursor&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesTree&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for TypeUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, '_&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CollectionAllocErr","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Clone for FromHexError","synthetic":false,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Clone for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Input + BlockInput + FixedOutput + Reset + Default + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;D::BlockSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Metadata&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["lru"] = [{"text":"impl&lt;'a, K, V&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]}];
implementors["matchers"] = [{"text":"impl&lt;S:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for Pattern&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: StateID,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: DFA&lt;ID = S&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for Matcher&lt;'a, S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: StateID,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: DFA&lt;ID = S&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["memory_db"] = [{"text":"impl&lt;T&gt; Clone for MemCounter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for NoopTracker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H, KF, T, M&gt; Clone for MemoryDB&lt;H, KF, T, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: KeyHasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;KF: KeyFunction&lt;H&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: MemTracker&lt;T&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;H&gt; Clone for HashKey&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H&gt; Clone for PrefixedKey&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone + KeyHasher&gt; Clone for LegacyPrefixedKey&lt;H&gt;","synthetic":false,"types":[]}];
implementors["memory_units"] = [{"text":"impl Clone for Bytes","synthetic":false,"types":[]},{"text":"impl Clone for Words","synthetic":false,"types":[]},{"text":"impl Clone for Pages","synthetic":false,"types":[]},{"text":"impl Clone for Words","synthetic":false,"types":[]},{"text":"impl Clone for Pages","synthetic":false,"types":[]}];
implementors["merlin"] = [{"text":"impl Clone for Transcript","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Clone for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Clone for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZFlush","synthetic":false,"types":[]},{"text":"impl Clone for MZStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZError","synthetic":false,"types":[]},{"text":"impl Clone for DataFormat","synthetic":false,"types":[]},{"text":"impl Clone for StreamResult","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Clone for Sign","synthetic":false,"types":[]},{"text":"impl Clone for BigInt","synthetic":false,"types":[]},{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for ParseBigIntError","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseRatioError","synthetic":false,"types":[]}];
implementors["object"] = [{"text":"impl Clone for Architecture","synthetic":false,"types":[]},{"text":"impl Clone for AddressSize","synthetic":false,"types":[]},{"text":"impl Clone for BinaryFormat","synthetic":false,"types":[]},{"text":"impl Clone for SectionKind","synthetic":false,"types":[]},{"text":"impl Clone for SymbolKind","synthetic":false,"types":[]},{"text":"impl Clone for SymbolScope","synthetic":false,"types":[]},{"text":"impl Clone for RelocationKind","synthetic":false,"types":[]},{"text":"impl Clone for RelocationEncoding","synthetic":false,"types":[]},{"text":"impl Clone for FileFlags","synthetic":false,"types":[]},{"text":"impl Clone for SectionFlags","synthetic":false,"types":[]},{"text":"impl&lt;Section:&nbsp;Clone&gt; Clone for SymbolFlags&lt;Section&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Endianness","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]},{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for Bytes&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for StringTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for SectionTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Clone + FileHeader&gt; Clone for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::SectionHeader: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Clone + FileHeader&gt; Clone for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Sym: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Mach:&nbsp;Clone + MachHeader&gt; Clone for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach::Nlist: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for SectionIndex","synthetic":false,"types":[]},{"text":"impl Clone for SymbolIndex","synthetic":false,"types":[]},{"text":"impl Clone for SymbolSection","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for Symbol&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RelocationTarget","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for CompressedData&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompressionFormat","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FileHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FileHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SectionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SectionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for CompressionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for CompressionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Sym32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Sym64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Syminfo32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Syminfo64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rel32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rela32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rel64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rela64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ProgramHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ProgramHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dyn32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dyn64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FatHeader","synthetic":false,"types":[]},{"text":"impl Clone for FatArch32","synthetic":false,"types":[]},{"text":"impl Clone for FatArch64","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for MachHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for MachHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LoadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LcStr&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SegmentCommand32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SegmentCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Section32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Section64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Fvmlib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FvmlibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dylib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubFrameworkCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubClientCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubUmbrellaCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubLibraryCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for PreboundDylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylinkerCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ThreadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RoutinesCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RoutinesCommand_64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DysymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibTableOfContents&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibModule32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibModule64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibReference&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for TwolevelHintsCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for TwolevelHint&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for PrebindCksumCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for UuidCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RpathCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LinkeditDataCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EncryptionInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EncryptionInfoCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for VersionMinCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for BuildVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for BuildToolVersion&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DyldInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LinkerOptionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SymSegCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for IdentCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FvmfileCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EntryPointCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SourceVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DataInCodeEntry&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Nlist32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Nlist64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Relocation&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RelocationInfo","synthetic":false,"types":[]},{"text":"impl Clone for ScatteredRelocationInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageDosHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageOs2Header","synthetic":false,"types":[]},{"text":"impl Clone for ImageVxdHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageFileHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageDataDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageOptionalHeader32","synthetic":false,"types":[]},{"text":"impl Clone for ImageRomOptionalHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageOptionalHeader64","synthetic":false,"types":[]},{"text":"impl Clone for ImageNtHeaders64","synthetic":false,"types":[]},{"text":"impl Clone for ImageNtHeaders32","synthetic":false,"types":[]},{"text":"impl Clone for ImageRomHeaders","synthetic":false,"types":[]},{"text":"impl Clone for Guid","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeader","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeaderV2","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeaderBigobj","synthetic":false,"types":[]},{"text":"impl Clone for ImageSectionHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbol","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolBytes","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolEx","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolExBytes","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolTokenDef","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolFunction","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolFunctionBeginEnd","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolWeak","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolSection","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolCrc","synthetic":false,"types":[]},{"text":"impl Clone for ImageRelocation","synthetic":false,"types":[]},{"text":"impl Clone for ImageLinenumber","synthetic":false,"types":[]},{"text":"impl Clone for ImageBaseRelocation","synthetic":false,"types":[]},{"text":"impl Clone for ImageArchiveMemberHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageExportDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageImportByName","synthetic":false,"types":[]},{"text":"impl Clone for ImageTlsDirectory64","synthetic":false,"types":[]},{"text":"impl Clone for ImageTlsDirectory32","synthetic":false,"types":[]},{"text":"impl Clone for ImageImportDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageBoundImportDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageBoundForwarderRef","synthetic":false,"types":[]},{"text":"impl Clone for ImageDelayloadDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectoryEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectoryString","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirStringU","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDataEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigCodeIntegrity","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocationTable","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation32","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation64","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation32V2","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation64V2","synthetic":false,"types":[]},{"text":"impl Clone for ImagePrologueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageEpilogueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigDirectory32","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigDirectory64","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchBase","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchHashes","synthetic":false,"types":[]},{"text":"impl Clone for ImageArmRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageArm64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageAlpha64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageAlphaRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveConfig32","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveConfig64","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveImport","synthetic":false,"types":[]},{"text":"impl Clone for ImageDebugDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageCoffSymbolsHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageDebugMisc","synthetic":false,"types":[]},{"text":"impl Clone for ImageFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageFunctionEntry64","synthetic":false,"types":[]},{"text":"impl Clone for ImageSeparateDebugHeader","synthetic":false,"types":[]},{"text":"impl Clone for NonPagedDebugInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageArchitectureEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImportObjectHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageCor20Header","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["parity_scale_codec"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for OptionBool","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Compact&lt;T&gt;","synthetic":false,"types":[]}];
implementors["parity_wasm"] = [{"text":"impl Clone for VarUint32","synthetic":false,"types":[]},{"text":"impl Clone for VarUint64","synthetic":false,"types":[]},{"text":"impl Clone for VarUint7","synthetic":false,"types":[]},{"text":"impl Clone for VarInt7","synthetic":false,"types":[]},{"text":"impl Clone for Uint8","synthetic":false,"types":[]},{"text":"impl Clone for VarInt32","synthetic":false,"types":[]},{"text":"impl Clone for VarInt64","synthetic":false,"types":[]},{"text":"impl Clone for Uint32","synthetic":false,"types":[]},{"text":"impl Clone for Uint64","synthetic":false,"types":[]},{"text":"impl Clone for VarUint1","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Deserialize&gt; Clone for CountedList&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone + Serialize&lt;Error = Error&gt;, T:&nbsp;Clone + IntoIterator&lt;Item = I&gt;&gt; Clone for CountedListWriter&lt;I, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Module","synthetic":false,"types":[]},{"text":"impl Clone for ImportCountType","synthetic":false,"types":[]},{"text":"impl Clone for Section","synthetic":false,"types":[]},{"text":"impl Clone for CustomSection","synthetic":false,"types":[]},{"text":"impl Clone for TypeSection","synthetic":false,"types":[]},{"text":"impl Clone for ImportSection","synthetic":false,"types":[]},{"text":"impl Clone for FunctionSection","synthetic":false,"types":[]},{"text":"impl Clone for TableSection","synthetic":false,"types":[]},{"text":"impl Clone for MemorySection","synthetic":false,"types":[]},{"text":"impl Clone for GlobalSection","synthetic":false,"types":[]},{"text":"impl Clone for ExportSection","synthetic":false,"types":[]},{"text":"impl Clone for CodeSection","synthetic":false,"types":[]},{"text":"impl Clone for ElementSection","synthetic":false,"types":[]},{"text":"impl Clone for DataSection","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for BlockType","synthetic":false,"types":[]},{"text":"impl Clone for FunctionType","synthetic":false,"types":[]},{"text":"impl Clone for TableElementType","synthetic":false,"types":[]},{"text":"impl Clone for GlobalType","synthetic":false,"types":[]},{"text":"impl Clone for TableType","synthetic":false,"types":[]},{"text":"impl Clone for ResizableLimits","synthetic":false,"types":[]},{"text":"impl Clone for MemoryType","synthetic":false,"types":[]},{"text":"impl Clone for External","synthetic":false,"types":[]},{"text":"impl Clone for ImportEntry","synthetic":false,"types":[]},{"text":"impl Clone for Internal","synthetic":false,"types":[]},{"text":"impl Clone for ExportEntry","synthetic":false,"types":[]},{"text":"impl Clone for GlobalEntry","synthetic":false,"types":[]},{"text":"impl Clone for Instructions","synthetic":false,"types":[]},{"text":"impl Clone for InitExpr","synthetic":false,"types":[]},{"text":"impl Clone for Instruction","synthetic":false,"types":[]},{"text":"impl Clone for BrTableData","synthetic":false,"types":[]},{"text":"impl Clone for Func","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for FuncBody","synthetic":false,"types":[]},{"text":"impl Clone for ElementSegment","synthetic":false,"types":[]},{"text":"impl Clone for DataSegment","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for IndexMap&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NameSection","synthetic":false,"types":[]},{"text":"impl Clone for ModuleNameSubsection","synthetic":false,"types":[]},{"text":"impl Clone for FunctionNameSubsection","synthetic":false,"types":[]},{"text":"impl Clone for LocalNameSubsection","synthetic":false,"types":[]},{"text":"impl Clone for RelocSection","synthetic":false,"types":[]},{"text":"impl Clone for RelocationEntry","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Clone for WaitTimeoutResult","synthetic":false,"types":[]},{"text":"impl Clone for OnceState","synthetic":false,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Clone for ParkResult","synthetic":false,"types":[]},{"text":"impl Clone for UnparkResult","synthetic":false,"types":[]},{"text":"impl Clone for RequeueOp","synthetic":false,"types":[]},{"text":"impl Clone for FilterOp","synthetic":false,"types":[]},{"text":"impl Clone for UnparkToken","synthetic":false,"types":[]},{"text":"impl Clone for ParkToken","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Clone for YesS3","synthetic":false,"types":[]},{"text":"impl Clone for NoS3","synthetic":false,"types":[]},{"text":"impl Clone for YesS4","synthetic":false,"types":[]},{"text":"impl Clone for NoS4","synthetic":false,"types":[]},{"text":"impl Clone for YesA1","synthetic":false,"types":[]},{"text":"impl Clone for NoA1","synthetic":false,"types":[]},{"text":"impl Clone for YesA2","synthetic":false,"types":[]},{"text":"impl Clone for NoA2","synthetic":false,"types":[]},{"text":"impl Clone for YesNI","synthetic":false,"types":[]},{"text":"impl Clone for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Clone, S4:&nbsp;Clone, NI:&nbsp;Clone&gt; Clone for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Clone&gt; Clone for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Clone for vec128_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec256_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec512_storage","synthetic":false,"types":[]}];
implementors["primitive_types"] = [{"text":"impl Clone for U128","synthetic":false,"types":[]},{"text":"impl Clone for U256","synthetic":false,"types":[]},{"text":"impl Clone for U512","synthetic":false,"types":[]},{"text":"impl Clone for H160","synthetic":false,"types":[]},{"text":"impl Clone for H256","synthetic":false,"types":[]},{"text":"impl Clone for H512","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Clone for TokenStream","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenTree","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Delimiter","synthetic":false,"types":[]},{"text":"impl Clone for Punct","synthetic":false,"types":[]},{"text":"impl Clone for Spacing","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for IntoIter","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Clone for Bernoulli","synthetic":false,"types":[]},{"text":"impl Clone for BernoulliError","synthetic":false,"types":[]},{"text":"impl Clone for Binomial","synthetic":false,"types":[]},{"text":"impl Clone for Cauchy","synthetic":false,"types":[]},{"text":"impl Clone for Dirichlet","synthetic":false,"types":[]},{"text":"impl Clone for Exp1","synthetic":false,"types":[]},{"text":"impl Clone for Exp","synthetic":false,"types":[]},{"text":"impl Clone for Gamma","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquared","synthetic":false,"types":[]},{"text":"impl Clone for FisherF","synthetic":false,"types":[]},{"text":"impl Clone for StudentT","synthetic":false,"types":[]},{"text":"impl Clone for Beta","synthetic":false,"types":[]},{"text":"impl Clone for StandardNormal","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for LogNormal","synthetic":false,"types":[]},{"text":"impl Clone for Pareto","synthetic":false,"types":[]},{"text":"impl Clone for Poisson","synthetic":false,"types":[]},{"text":"impl Clone for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform&gt; Clone for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UniformDuration","synthetic":false,"types":[]},{"text":"impl Clone for UnitCircle","synthetic":false,"types":[]},{"text":"impl Clone for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Clone for Weibull","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Weight&gt; Clone for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Uniform&lt;W&gt;: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform + PartialOrd&gt; Clone for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for WeightedError","synthetic":false,"types":[]},{"text":"impl Clone for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Clone for Open01","synthetic":false,"types":[]},{"text":"impl Clone for Standard","synthetic":false,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Clone for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BlockRngCore + SeedableRng + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RngCore + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for StepRng","synthetic":false,"types":[]},{"text":"impl Clone for SmallRng","synthetic":false,"types":[]},{"text":"impl Clone for StdRng","synthetic":false,"types":[]},{"text":"impl Clone for ThreadRng","synthetic":false,"types":[]},{"text":"impl Clone for IndexVec","synthetic":false,"types":[]},{"text":"impl Clone for IndexVecIntoIter","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Clone for ChaCha20Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OsRng","synthetic":false,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl Clone for Lcg64Xsh32","synthetic":false,"types":[]},{"text":"impl Clone for Lcg128Xsl64","synthetic":false,"types":[]},{"text":"impl Clone for Mcg128Xsl64","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for DenseDFA&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for Standard&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for ByteClass&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for Premultiplied&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[S]&gt;, S:&nbsp;Clone + StateID&gt; Clone for PremultipliedByteClass&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + DFA&gt; Clone for Regex&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexBuilder","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;, S:&nbsp;Clone + StateID&gt; Clone for SparseDFA&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;, S:&nbsp;Clone + StateID&gt; Clone for Standard&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + AsRef&lt;[u8]&gt;, S:&nbsp;Clone + StateID&gt; Clone for ByteClass&lt;T, S&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["rlp"] = [{"text":"impl Clone for DecoderError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Rlp&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl Clone for TryDemangleError","synthetic":false,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl Clone for FromHexError","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["schnorrkel"] = [{"text":"impl Clone for RistrettoBoth","synthetic":false,"types":[]},{"text":"impl Clone for MiniSecretKey","synthetic":false,"types":[]},{"text":"impl Clone for SecretKey","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for Keypair","synthetic":false,"types":[]},{"text":"impl Clone for SigningContext","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + SigningTranscript&gt; Clone for Malleable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for VRFOutput","synthetic":false,"types":[]},{"text":"impl Clone for VRFInOut","synthetic":false,"types":[]},{"text":"impl Clone for VRFProof","synthetic":false,"types":[]},{"text":"impl Clone for VRFProofBatchable","synthetic":false,"types":[]},{"text":"impl Clone for ChainCode","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone&gt; Clone for ExtendedKey&lt;K&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ECQVCertSecret","synthetic":false,"types":[]},{"text":"impl Clone for ECQVCertPublic","synthetic":false,"types":[]},{"text":"impl Clone for MultiSignatureStage","synthetic":false,"types":[]},{"text":"impl Clone for SignatureError","synthetic":false,"types":[]},{"text":"impl Clone for Commitment","synthetic":false,"types":[]},{"text":"impl Clone for Reveal","synthetic":false,"types":[]},{"text":"impl Clone for Cosignature","synthetic":false,"types":[]}];
implementors["secp256k1"] = [{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Affine","synthetic":false,"types":[]},{"text":"impl Clone for Jacobian","synthetic":false,"types":[]},{"text":"impl Clone for AffineStorage","synthetic":false,"types":[]},{"text":"impl Clone for Scalar","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for SecretKey","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for RecoveryId","synthetic":false,"types":[]},{"text":"impl Clone for Message","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone + Digest&gt; Clone for SharedSecret&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D::OutputSize: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["secrecy"] = [{"text":"impl&lt;S&gt; Clone for Secret&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: CloneableSecret,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Clone for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Clone for Category","synthetic":false,"types":[]},{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompactFormatter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PrettyFormatter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]}];
implementors["sha2"] = [{"text":"impl Clone for Sha256","synthetic":false,"types":[]},{"text":"impl Clone for Sha224","synthetic":false,"types":[]},{"text":"impl Clone for Sha512","synthetic":false,"types":[]},{"text":"impl Clone for Sha384","synthetic":false,"types":[]},{"text":"impl Clone for Sha512Trunc256","synthetic":false,"types":[]},{"text":"impl Clone for Sha512Trunc224","synthetic":false,"types":[]}];
implementors["sharded_slab"] = [{"text":"impl Clone for DefaultConfig","synthetic":false,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Slab&lt;T&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Clone for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array + Clone&gt; Clone for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_application_crypto"] = [{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for Percent","synthetic":false,"types":[]},{"text":"impl Clone for PerU16","synthetic":false,"types":[]},{"text":"impl Clone for Permill","synthetic":false,"types":[]},{"text":"impl Clone for Perbill","synthetic":false,"types":[]},{"text":"impl Clone for Perquintill","synthetic":false,"types":[]},{"text":"impl Clone for FixedI64","synthetic":false,"types":[]},{"text":"impl Clone for FixedI128","synthetic":false,"types":[]},{"text":"impl Clone for FixedU128","synthetic":false,"types":[]},{"text":"impl Clone for RationalInfinite","synthetic":false,"types":[]},{"text":"impl Clone for Rational128","synthetic":false,"types":[]}];
implementors["sp_core"] = [{"text":"impl Clone for SecretStringError","synthetic":false,"types":[]},{"text":"impl Clone for DeriveJunction","synthetic":false,"types":[]},{"text":"impl Clone for PublicError","synthetic":false,"types":[]},{"text":"impl Clone for Ss58AddressFormat","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for AccountId32","synthetic":false,"types":[]},{"text":"impl Clone for Dummy","synthetic":false,"types":[]},{"text":"impl Clone for KeyTypeId","synthetic":false,"types":[]},{"text":"impl Clone for CryptoTypeId","synthetic":false,"types":[]},{"text":"impl Clone for CryptoTypePublicPair","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for LocalizedSignature","synthetic":false,"types":[]},{"text":"impl Clone for PublicError","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for LocalizedSignature","synthetic":false,"types":[]},{"text":"impl Clone for Public","synthetic":false,"types":[]},{"text":"impl Clone for PublicError","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Pair","synthetic":false,"types":[]},{"text":"impl Clone for InMemOffchainStorage","synthetic":false,"types":[]},{"text":"impl Clone for OffchainOverlayedChange","synthetic":false,"types":[]},{"text":"impl Clone for OffchainOverlayedChanges","synthetic":false,"types":[]},{"text":"impl Clone for TestPersistentOffchainDB","synthetic":false,"types":[]},{"text":"impl Clone for TestOffchainExt","synthetic":false,"types":[]},{"text":"impl Clone for StorageKind","synthetic":false,"types":[]},{"text":"impl Clone for HttpRequestId","synthetic":false,"types":[]},{"text":"impl Clone for HttpError","synthetic":false,"types":[]},{"text":"impl Clone for HttpRequestStatus","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueNetworkState","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueMultiaddr","synthetic":false,"types":[]},{"text":"impl Clone for Timestamp","synthetic":false,"types":[]},{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for Capability","synthetic":false,"types":[]},{"text":"impl Clone for Capabilities","synthetic":false,"types":[]},{"text":"impl Clone for ExternEntity","synthetic":false,"types":[]},{"text":"impl Clone for Entry","synthetic":false,"types":[]},{"text":"impl Clone for EnvironmentDefinition","synthetic":false,"types":[]},{"text":"impl Clone for ChangesTrieConfiguration","synthetic":false,"types":[]},{"text":"impl&lt;Number:&nbsp;Clone, Hash:&nbsp;Clone&gt; Clone for ChangesTrieConfigurationRange&lt;Number, Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for RuntimeCode&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for MissingHostFunctions","synthetic":false,"types":[]},{"text":"impl&lt;'clone&gt; Clone for Box&lt;dyn SpawnNamed + 'clone&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TaskExecutor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VRFTranscriptValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VRFTranscriptData&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Bytes","synthetic":false,"types":[]},{"text":"impl Clone for OpaquePeerId","synthetic":false,"types":[]},{"text":"impl Clone for LogLevel","synthetic":false,"types":[]},{"text":"impl Clone for Void","synthetic":false,"types":[]}];
implementors["sp_inherents"] = [{"text":"impl Clone for InherentData","synthetic":false,"types":[]},{"text":"impl Clone for CheckInherentsResult","synthetic":false,"types":[]},{"text":"impl Clone for InherentDataProviders","synthetic":false,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl&lt;Address:&nbsp;Clone, Call:&nbsp;Clone, Signature:&nbsp;Clone, Extra:&nbsp;Clone&gt; Clone for UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: SignedExtension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Era","synthetic":false,"types":[]},{"text":"impl&lt;AccountId:&nbsp;Clone, Call:&nbsp;Clone, Extra:&nbsp;Clone&gt; Clone for CheckedExtrinsic&lt;AccountId, Call, Extra&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Number:&nbsp;Clone + Copy + Into&lt;U256&gt; + TryFrom&lt;U256&gt;, Hash:&nbsp;Clone + HashT&gt; Clone for Header&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash::Output: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone + BlockT&gt; Clone for BlockId&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block::Hash: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Header:&nbsp;Clone, Extrinsic:&nbsp;Clone + MaybeSerialize&gt; Clone for Block&lt;Header, Extrinsic&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Block:&nbsp;Clone&gt; Clone for SignedBlock&lt;Block&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Clone&gt; Clone for Digest&lt;Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Hash:&nbsp;Clone&gt; Clone for DigestItem&lt;Hash&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ChangesTrieSignal","synthetic":false,"types":[]},{"text":"impl&lt;'a, Hash:&nbsp;Clone + 'a&gt; Clone for DigestItemRef&lt;'a, Hash&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OpaqueDigestItemId&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Method","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for Request&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ResponseBody","synthetic":false,"types":[]},{"text":"impl Clone for Headers","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for HeadersIterator&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;BlockNumberProvider&gt; Clone for BlockAndTimeDeadline&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;BlockNumberProvider&gt; Clone for BlockAndTime&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UintAuthorityId","synthetic":false,"types":[]},{"text":"impl Clone for TestSignature","synthetic":false,"types":[]},{"text":"impl&lt;Xt:&nbsp;Clone&gt; Clone for ExtrinsicWrapper&lt;Xt&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Xt:&nbsp;Clone&gt; Clone for Block&lt;Xt&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Call:&nbsp;Clone, Extra:&nbsp;Clone&gt; Clone for TestXt&lt;Call, Extra&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BlakeTwo256","synthetic":false,"types":[]},{"text":"impl Clone for Keccak256","synthetic":false,"types":[]},{"text":"impl Clone for InvalidTransaction","synthetic":false,"types":[]},{"text":"impl Clone for UnknownTransaction","synthetic":false,"types":[]},{"text":"impl Clone for TransactionValidityError","synthetic":false,"types":[]},{"text":"impl Clone for TransactionSource","synthetic":false,"types":[]},{"text":"impl Clone for ValidTransaction","synthetic":false,"types":[]},{"text":"impl Clone for ValidTransactionBuilder","synthetic":false,"types":[]},{"text":"impl Clone for RuntimeString","synthetic":false,"types":[]},{"text":"impl Clone for ModuleId","synthetic":false,"types":[]},{"text":"impl Clone for MultiSignature","synthetic":false,"types":[]},{"text":"impl Clone for MultiSigner","synthetic":false,"types":[]},{"text":"impl Clone for AnySignature","synthetic":false,"types":[]},{"text":"impl Clone for DispatchError","synthetic":false,"types":[]},{"text":"impl&lt;Info:&nbsp;Clone&gt; Clone for DispatchErrorWithPostInfo&lt;Info&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: Eq + PartialEq + Clone + Copy + Encode + Decode + Printable,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueExtrinsic","synthetic":false,"types":[]}];
implementors["sp_state_machine"] = [{"text":"impl&lt;H:&nbsp;Hasher&gt; Clone for TrieBackend&lt;MemoryDB&lt;H&gt;, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H::Out: Codec + Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Clone&gt; Clone for ConfigurationRange&lt;'a, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, H, Number:&nbsp;Clone&gt; Clone for State&lt;'a, H, Number&gt;","synthetic":false,"types":[]},{"text":"impl Clone for OverlayedChanges","synthetic":false,"types":[]},{"text":"impl Clone for UsageUnit","synthetic":false,"types":[]},{"text":"impl Clone for UsageInfo","synthetic":false,"types":[]},{"text":"impl Clone for StateMachineStats","synthetic":false,"types":[]},{"text":"impl Clone for ExecutionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for BackendTrustLevel","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for ExecutionManager&lt;F&gt;","synthetic":false,"types":[]}];
implementors["sp_storage"] = [{"text":"impl Clone for StorageKey","synthetic":false,"types":[]},{"text":"impl Clone for TrackedStorageKey","synthetic":false,"types":[]},{"text":"impl Clone for PrefixedStorageKey","synthetic":false,"types":[]},{"text":"impl Clone for StorageData","synthetic":false,"types":[]},{"text":"impl Clone for StorageChild","synthetic":false,"types":[]},{"text":"impl Clone for Storage","synthetic":false,"types":[]},{"text":"impl Clone for ChildInfo","synthetic":false,"types":[]},{"text":"impl Clone for ChildType","synthetic":false,"types":[]},{"text":"impl Clone for ChildTrieParentKeyId","synthetic":false,"types":[]}];
implementors["sp_tracing"] = [{"text":"impl Clone for WasmLevel","synthetic":false,"types":[]},{"text":"impl Clone for WasmValue","synthetic":false,"types":[]},{"text":"impl Clone for WasmFieldName","synthetic":false,"types":[]},{"text":"impl Clone for WasmFields","synthetic":false,"types":[]},{"text":"impl Clone for WasmValuesSet","synthetic":false,"types":[]},{"text":"impl Clone for WasmMetadata","synthetic":false,"types":[]},{"text":"impl Clone for WasmEntryAttributes","synthetic":false,"types":[]}];
implementors["sp_trie"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;H:&nbsp;Clone&gt; Clone for NodeCodec&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl Clone for StorageProof","synthetic":false,"types":[]},{"text":"impl Clone for TrieStream","synthetic":false,"types":[]}];
implementors["sp_wasm_interface"] = [{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + PointerType&gt; Clone for Pointer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for ReturnValue","synthetic":false,"types":[]}];
implementors["substrate_bip39"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["subtle"] = [{"text":"impl Clone for Choice","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CtOption&lt;T&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Clone for Underscore","synthetic":false,"types":[]},{"text":"impl Clone for Abstract","synthetic":false,"types":[]},{"text":"impl Clone for As","synthetic":false,"types":[]},{"text":"impl Clone for Async","synthetic":false,"types":[]},{"text":"impl Clone for Auto","synthetic":false,"types":[]},{"text":"impl Clone for Await","synthetic":false,"types":[]},{"text":"impl Clone for Become","synthetic":false,"types":[]},{"text":"impl Clone for Box","synthetic":false,"types":[]},{"text":"impl Clone for Break","synthetic":false,"types":[]},{"text":"impl Clone for Const","synthetic":false,"types":[]},{"text":"impl Clone for Continue","synthetic":false,"types":[]},{"text":"impl Clone for Crate","synthetic":false,"types":[]},{"text":"impl Clone for Default","synthetic":false,"types":[]},{"text":"impl Clone for Do","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Else","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Final","synthetic":false,"types":[]},{"text":"impl Clone for Fn","synthetic":false,"types":[]},{"text":"impl Clone for For","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for Impl","synthetic":false,"types":[]},{"text":"impl Clone for In","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for Move","synthetic":false,"types":[]},{"text":"impl Clone for Mut","synthetic":false,"types":[]},{"text":"impl Clone for Override","synthetic":false,"types":[]},{"text":"impl Clone for Priv","synthetic":false,"types":[]},{"text":"impl Clone for Pub","synthetic":false,"types":[]},{"text":"impl Clone for Ref","synthetic":false,"types":[]},{"text":"impl Clone for Return","synthetic":false,"types":[]},{"text":"impl Clone for SelfType","synthetic":false,"types":[]},{"text":"impl Clone for SelfValue","synthetic":false,"types":[]},{"text":"impl Clone for Static","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for Super","synthetic":false,"types":[]},{"text":"impl Clone for Trait","synthetic":false,"types":[]},{"text":"impl Clone for Try","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Typeof","synthetic":false,"types":[]},{"text":"impl Clone for Union","synthetic":false,"types":[]},{"text":"impl Clone for Unsafe","synthetic":false,"types":[]},{"text":"impl Clone for Unsized","synthetic":false,"types":[]},{"text":"impl Clone for Use","synthetic":false,"types":[]},{"text":"impl Clone for Virtual","synthetic":false,"types":[]},{"text":"impl Clone for Where","synthetic":false,"types":[]},{"text":"impl Clone for While","synthetic":false,"types":[]},{"text":"impl Clone for Yield","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for AddEq","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for AndAnd","synthetic":false,"types":[]},{"text":"impl Clone for AndEq","synthetic":false,"types":[]},{"text":"impl Clone for At","synthetic":false,"types":[]},{"text":"impl Clone for Bang","synthetic":false,"types":[]},{"text":"impl Clone for Caret","synthetic":false,"types":[]},{"text":"impl Clone for CaretEq","synthetic":false,"types":[]},{"text":"impl Clone for Colon","synthetic":false,"types":[]},{"text":"impl Clone for Colon2","synthetic":false,"types":[]},{"text":"impl Clone for Comma","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for DivEq","synthetic":false,"types":[]},{"text":"impl Clone for Dollar","synthetic":false,"types":[]},{"text":"impl Clone for Dot","synthetic":false,"types":[]},{"text":"impl Clone for Dot2","synthetic":false,"types":[]},{"text":"impl Clone for Dot3","synthetic":false,"types":[]},{"text":"impl Clone for DotDotEq","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for EqEq","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for MulEq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for OrEq","synthetic":false,"types":[]},{"text":"impl Clone for OrOr","synthetic":false,"types":[]},{"text":"impl Clone for Pound","synthetic":false,"types":[]},{"text":"impl Clone for Question","synthetic":false,"types":[]},{"text":"impl Clone for RArrow","synthetic":false,"types":[]},{"text":"impl Clone for LArrow","synthetic":false,"types":[]},{"text":"impl Clone for Rem","synthetic":false,"types":[]},{"text":"impl Clone for RemEq","synthetic":false,"types":[]},{"text":"impl Clone for FatArrow","synthetic":false,"types":[]},{"text":"impl Clone for Semi","synthetic":false,"types":[]},{"text":"impl Clone for Shl","synthetic":false,"types":[]},{"text":"impl Clone for ShlEq","synthetic":false,"types":[]},{"text":"impl Clone for Shr","synthetic":false,"types":[]},{"text":"impl Clone for ShrEq","synthetic":false,"types":[]},{"text":"impl Clone for Star","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for SubEq","synthetic":false,"types":[]},{"text":"impl Clone for Tilde","synthetic":false,"types":[]},{"text":"impl Clone for Brace","synthetic":false,"types":[]},{"text":"impl Clone for Bracket","synthetic":false,"types":[]},{"text":"impl Clone for Paren","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for AttrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]},{"text":"impl Clone for MetaList","synthetic":false,"types":[]},{"text":"impl Clone for MetaNameValue","synthetic":false,"types":[]},{"text":"impl Clone for NestedMeta","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for Fields","synthetic":false,"types":[]},{"text":"impl Clone for FieldsNamed","synthetic":false,"types":[]},{"text":"impl Clone for FieldsUnnamed","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for VisPublic","synthetic":false,"types":[]},{"text":"impl Clone for VisCrate","synthetic":false,"types":[]},{"text":"impl Clone for VisRestricted","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for ExprArray","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssign","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssignOp","synthetic":false,"types":[]},{"text":"impl Clone for ExprAsync","synthetic":false,"types":[]},{"text":"impl Clone for ExprAwait","synthetic":false,"types":[]},{"text":"impl Clone for ExprBinary","synthetic":false,"types":[]},{"text":"impl Clone for ExprBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprBox","synthetic":false,"types":[]},{"text":"impl Clone for ExprBreak","synthetic":false,"types":[]},{"text":"impl Clone for ExprCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprCast","synthetic":false,"types":[]},{"text":"impl Clone for ExprClosure","synthetic":false,"types":[]},{"text":"impl Clone for ExprContinue","synthetic":false,"types":[]},{"text":"impl Clone for ExprField","synthetic":false,"types":[]},{"text":"impl Clone for ExprForLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprGroup","synthetic":false,"types":[]},{"text":"impl Clone for ExprIf","synthetic":false,"types":[]},{"text":"impl Clone for ExprIndex","synthetic":false,"types":[]},{"text":"impl Clone for ExprLet","synthetic":false,"types":[]},{"text":"impl Clone for ExprLit","synthetic":false,"types":[]},{"text":"impl Clone for ExprLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprMacro","synthetic":false,"types":[]},{"text":"impl Clone for ExprMatch","synthetic":false,"types":[]},{"text":"impl Clone for ExprMethodCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprParen","synthetic":false,"types":[]},{"text":"impl Clone for ExprPath","synthetic":false,"types":[]},{"text":"impl Clone for ExprRange","synthetic":false,"types":[]},{"text":"impl Clone for ExprReference","synthetic":false,"types":[]},{"text":"impl Clone for ExprRepeat","synthetic":false,"types":[]},{"text":"impl Clone for ExprReturn","synthetic":false,"types":[]},{"text":"impl Clone for ExprStruct","synthetic":false,"types":[]},{"text":"impl Clone for ExprTry","synthetic":false,"types":[]},{"text":"impl Clone for ExprTryBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprTuple","synthetic":false,"types":[]},{"text":"impl Clone for ExprType","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnary","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnsafe","synthetic":false,"types":[]},{"text":"impl Clone for ExprWhile","synthetic":false,"types":[]},{"text":"impl Clone for ExprYield","synthetic":false,"types":[]},{"text":"impl Clone for Member","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for MethodTurbofish","synthetic":false,"types":[]},{"text":"impl Clone for GenericMethodArgument","synthetic":false,"types":[]},{"text":"impl Clone for FieldValue","synthetic":false,"types":[]},{"text":"impl Clone for Label","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for RangeLimits","synthetic":false,"types":[]},{"text":"impl Clone for Generics","synthetic":false,"types":[]},{"text":"impl Clone for GenericParam","synthetic":false,"types":[]},{"text":"impl Clone for TypeParam","synthetic":false,"types":[]},{"text":"impl Clone for LifetimeDef","synthetic":false,"types":[]},{"text":"impl Clone for ConstParam","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ImplGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TypeGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Turbofish&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Clone for TypeParamBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for WherePredicate","synthetic":false,"types":[]},{"text":"impl Clone for PredicateType","synthetic":false,"types":[]},{"text":"impl Clone for PredicateLifetime","synthetic":false,"types":[]},{"text":"impl Clone for PredicateEq","synthetic":false,"types":[]},{"text":"impl Clone for Item","synthetic":false,"types":[]},{"text":"impl Clone for ItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ItemEnum","synthetic":false,"types":[]},{"text":"impl Clone for ItemExternCrate","synthetic":false,"types":[]},{"text":"impl Clone for ItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ItemForeignMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemImpl","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro2","synthetic":false,"types":[]},{"text":"impl Clone for ItemMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ItemStruct","synthetic":false,"types":[]},{"text":"impl Clone for ItemTrait","synthetic":false,"types":[]},{"text":"impl Clone for ItemTraitAlias","synthetic":false,"types":[]},{"text":"impl Clone for ItemType","synthetic":false,"types":[]},{"text":"impl Clone for ItemUnion","synthetic":false,"types":[]},{"text":"impl Clone for ItemUse","synthetic":false,"types":[]},{"text":"impl Clone for UseTree","synthetic":false,"types":[]},{"text":"impl Clone for UsePath","synthetic":false,"types":[]},{"text":"impl Clone for UseName","synthetic":false,"types":[]},{"text":"impl Clone for UseRename","synthetic":false,"types":[]},{"text":"impl Clone for UseGlob","synthetic":false,"types":[]},{"text":"impl Clone for UseGroup","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItem","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemType","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for TraitItem","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemConst","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemType","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ImplItem","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemType","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for FnArg","synthetic":false,"types":[]},{"text":"impl Clone for Receiver","synthetic":false,"types":[]},{"text":"impl Clone for File","synthetic":false,"types":[]},{"text":"impl Clone for Lifetime","synthetic":false,"types":[]},{"text":"impl Clone for Lit","synthetic":false,"types":[]},{"text":"impl Clone for LitStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByteStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByte","synthetic":false,"types":[]},{"text":"impl Clone for LitChar","synthetic":false,"types":[]},{"text":"impl Clone for LitInt","synthetic":false,"types":[]},{"text":"impl Clone for LitFloat","synthetic":false,"types":[]},{"text":"impl Clone for LitBool","synthetic":false,"types":[]},{"text":"impl Clone for StrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for MacroDelimiter","synthetic":false,"types":[]},{"text":"impl Clone for DeriveInput","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for DataStruct","synthetic":false,"types":[]},{"text":"impl Clone for DataEnum","synthetic":false,"types":[]},{"text":"impl Clone for DataUnion","synthetic":false,"types":[]},{"text":"impl Clone for BinOp","synthetic":false,"types":[]},{"text":"impl Clone for UnOp","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeArray","synthetic":false,"types":[]},{"text":"impl Clone for TypeBareFn","synthetic":false,"types":[]},{"text":"impl Clone for TypeGroup","synthetic":false,"types":[]},{"text":"impl Clone for TypeImplTrait","synthetic":false,"types":[]},{"text":"impl Clone for TypeInfer","synthetic":false,"types":[]},{"text":"impl Clone for TypeMacro","synthetic":false,"types":[]},{"text":"impl Clone for TypeNever","synthetic":false,"types":[]},{"text":"impl Clone for TypeParen","synthetic":false,"types":[]},{"text":"impl Clone for TypePath","synthetic":false,"types":[]},{"text":"impl Clone for TypePtr","synthetic":false,"types":[]},{"text":"impl Clone for TypeReference","synthetic":false,"types":[]},{"text":"impl Clone for TypeSlice","synthetic":false,"types":[]},{"text":"impl Clone for TypeTraitObject","synthetic":false,"types":[]},{"text":"impl Clone for TypeTuple","synthetic":false,"types":[]},{"text":"impl Clone for Abi","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArg","synthetic":false,"types":[]},{"text":"impl Clone for Variadic","synthetic":false,"types":[]},{"text":"impl Clone for ReturnType","synthetic":false,"types":[]},{"text":"impl Clone for Pat","synthetic":false,"types":[]},{"text":"impl Clone for PatBox","synthetic":false,"types":[]},{"text":"impl Clone for PatIdent","synthetic":false,"types":[]},{"text":"impl Clone for PatLit","synthetic":false,"types":[]},{"text":"impl Clone for PatMacro","synthetic":false,"types":[]},{"text":"impl Clone for PatOr","synthetic":false,"types":[]},{"text":"impl Clone for PatPath","synthetic":false,"types":[]},{"text":"impl Clone for PatRange","synthetic":false,"types":[]},{"text":"impl Clone for PatReference","synthetic":false,"types":[]},{"text":"impl Clone for PatRest","synthetic":false,"types":[]},{"text":"impl Clone for PatSlice","synthetic":false,"types":[]},{"text":"impl Clone for PatStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatTuple","synthetic":false,"types":[]},{"text":"impl Clone for PatTupleStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatType","synthetic":false,"types":[]},{"text":"impl Clone for PatWild","synthetic":false,"types":[]},{"text":"impl Clone for FieldPat","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for PathSegment","synthetic":false,"types":[]},{"text":"impl Clone for PathArguments","synthetic":false,"types":[]},{"text":"impl Clone for GenericArgument","synthetic":false,"types":[]},{"text":"impl Clone for AngleBracketedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Binding","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for ParenthesizedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for QSelf","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Clone for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for IntoPairs&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, P:&nbsp;Clone&gt; Clone for Pair&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Clone for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["synstructure"] = [{"text":"impl Clone for AddBounds","synthetic":false,"types":[]},{"text":"impl Clone for BindStyle","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BindingInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VariantAst&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VariantInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Structure&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Clone for Timespec","synthetic":false,"types":[]},{"text":"impl Clone for PreciseTime","synthetic":false,"types":[]},{"text":"impl Clone for SteadyTime","synthetic":false,"types":[]},{"text":"impl Clone for Tm","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]}];
implementors["tiny_keccak"] = [{"text":"impl Clone for Keccak","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Datetime","synthetic":false,"types":[]},{"text":"impl Clone for DatetimeParseError","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Spanned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tracing"] = [{"text":"impl Clone for Span","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Clone for Identifier","synthetic":false,"types":[]},{"text":"impl Clone for Dispatch","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Display&gt; Clone for DisplayValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Debug&gt; Clone for DebugValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Kind","synthetic":false,"types":[]},{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl Clone for ParseLevelFilterError","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]},{"text":"impl Clone for Interest","synthetic":false,"types":[]}];
implementors["tracing_subscriber"] = [{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for Alt&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Clone, V:&nbsp;Clone&gt; Clone for Delimited&lt;D, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for Messages&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BadName","synthetic":false,"types":[]},{"text":"impl Clone for Json","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for FieldFn&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Compact","synthetic":false,"types":[]},{"text":"impl Clone for Full","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone, T:&nbsp;Clone&gt; Clone for Format&lt;F, T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FmtSpan","synthetic":false,"types":[]},{"text":"impl Clone for SystemTime","synthetic":false,"types":[]},{"text":"impl Clone for Uptime","synthetic":false,"types":[]},{"text":"impl Clone for ChronoUtc","synthetic":false,"types":[]},{"text":"impl Clone for ChronoLocal","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone, I:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for Layered&lt;L, I, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Identity","synthetic":false,"types":[]},{"text":"impl&lt;'a, S&gt; Clone for Context&lt;'a, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;L, S&gt; Clone for Handle&lt;L, S&gt;","synthetic":false,"types":[]}];
implementors["trie_db"] = [{"text":"impl&lt;'a&gt; Clone for NodeHandle&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Node&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NodeHandlePlan","synthetic":false,"types":[]},{"text":"impl Clone for NibbleSlicePlan","synthetic":false,"types":[]},{"text":"impl Clone for NodePlan","synthetic":false,"types":[]},{"text":"impl&lt;HO:&nbsp;Clone&gt; Clone for ChildReference&lt;HO&gt;","synthetic":false,"types":[]},{"text":"impl&lt;HO:&nbsp;Clone&gt; Clone for Record&lt;HO&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NibbleVec","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for NibbleSlice&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for TrieError&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TrieSpec","synthetic":false,"types":[]},{"text":"impl&lt;L:&nbsp;Clone + TrieLayout&gt; Clone for TrieFactory&lt;L&gt;","synthetic":false,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Clone for XxHash64","synthetic":false,"types":[]},{"text":"impl Clone for XxHash32","synthetic":false,"types":[]},{"text":"impl Clone for RandomXxHashBuilder64","synthetic":false,"types":[]},{"text":"impl Clone for RandomXxHashBuilder32","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Clone for B0","synthetic":false,"types":[]},{"text":"impl Clone for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone + Unsigned + NonZero&gt; Clone for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone + Unsigned + NonZero&gt; Clone for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Z0","synthetic":false,"types":[]},{"text":"impl Clone for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Greater","synthetic":false,"types":[]},{"text":"impl Clone for Less","synthetic":false,"types":[]},{"text":"impl Clone for Equal","synthetic":false,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Decompositions&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Recompositions&lt;I&gt;","synthetic":false,"types":[]}];
implementors["wasmi"] = [{"text":"impl Clone for FuncRef","synthetic":false,"types":[]},{"text":"impl Clone for GlobalRef","synthetic":false,"types":[]},{"text":"impl Clone for MemoryRef","synthetic":false,"types":[]},{"text":"impl Clone for ModuleRef","synthetic":false,"types":[]},{"text":"impl Clone for ExternVal","synthetic":false,"types":[]},{"text":"impl Clone for F32","synthetic":false,"types":[]},{"text":"impl Clone for F64","synthetic":false,"types":[]},{"text":"impl Clone for TableRef","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for RuntimeValue","synthetic":false,"types":[]}];
implementors["wasmi_validation"] = [{"text":"impl Clone for BlockFrame","synthetic":false,"types":[]},{"text":"impl Clone for StartedWith","synthetic":false,"types":[]},{"text":"impl Clone for StackValueType","synthetic":false,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z:&nbsp;Clone + Zeroize&gt; Clone for Zeroizing&lt;Z&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()