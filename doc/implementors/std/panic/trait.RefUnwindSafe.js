(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; RefUnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; RefUnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl RefUnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; RefUnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !RefUnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrintFmt","synthetic":true,"types":[]}];
implementors["base58"] = [{"text":"impl RefUnwindSafe for FromBase58Error","synthetic":true,"types":[]}];
implementors["bip39"] = [{"text":"impl RefUnwindSafe for Mnemonic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Seed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Language","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MnemonicType","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for BitIdx&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BitPos&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BitMask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Msb0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; RefUnwindSafe for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for Iter&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for IterMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for ChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for ChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for RChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for RChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; RefUnwindSafe for Split&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; RefUnwindSafe for SplitMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; RefUnwindSafe for RSplit&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; RefUnwindSafe for RSplitMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; RefUnwindSafe for SplitN&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; RefUnwindSafe for SplitNMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; RefUnwindSafe for RSplitN&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, F&gt; RefUnwindSafe for RSplitNMut&lt;'a, O, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for BitMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Access: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; RefUnwindSafe for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; RefUnwindSafe for IntoIter&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; RefUnwindSafe for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for Drain&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; RefUnwindSafe for IntoIter&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, I&gt; RefUnwindSafe for Splice&lt;'a, O, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["blake2_rfc"] = [{"text":"impl RefUnwindSafe for Blake2bResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blake2b","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blake2sResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blake2s","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; RefUnwindSafe for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byte_slice_cast"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["chain_spec_builder"] = [{"text":"impl RefUnwindSafe for ChainSpecBuilder","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; RefUnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl RefUnwindSafe for Scalar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MontgomeryPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressedEdwardsY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EdwardsPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VartimeEdwardsPrecomputation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EdwardsBasepointTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressedRistretto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RistrettoPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VartimeRistrettoPrecomputation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RistrettoBasepointTable","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl RefUnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["ed25519"] = [{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl RefUnwindSafe for Keypair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecretKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpandedSecretKey","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; RefUnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ethbloom"] = [{"text":"impl RefUnwindSafe for Bloom","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BloomRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Input&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ethereum_types"] = [{"text":"impl RefUnwindSafe for H128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for H264","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for H32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for H520","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for H64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U64","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !RefUnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fork_tree"] = [{"text":"impl&lt;H, N, V&gt; RefUnwindSafe for ForkTree&lt;H, N, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for FinalizationResult&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_benchmarking"] = [{"text":"impl RefUnwindSafe for BenchmarkBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BenchmarkResults","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BenchmarkConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Analysis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BenchmarkParameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BenchmarkSelector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]}];
implementors["frame_benchmarking_cli"] = [{"text":"impl RefUnwindSafe for BenchmarkCmd","synthetic":true,"types":[]}];
implementors["frame_executive"] = [{"text":"impl&lt;System, Block, Context, UnsignedValidator, AllModules, OnRuntimeUpgrade&gt; RefUnwindSafe for Executive&lt;System, Block, Context, UnsignedValidator, AllModules, OnRuntimeUpgrade&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllModules: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Context: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;OnRuntimeUpgrade: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;System: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;UnsignedValidator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_metadata"] = [{"text":"impl RefUnwindSafe for FunctionMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionArgumentMetadata","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for FnEncode&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OuterEventMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventMetadata","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageEntryMetadata","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ModuleConstantMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorMetadata","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultByteGetter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageMetadata","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeMetadataPrefixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtrinsicMetadata","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeMetadataV12","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ModuleMetadata","synthetic":true,"types":[]},{"text":"impl&lt;B, O&gt; RefUnwindSafe for DecodeDifferent&lt;B, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageHasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageEntryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageEntryModifier","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeMetadataDeprecated","synthetic":true,"types":[]}];
implementors["frame_support"] = [{"text":"impl RefUnwindSafe for Twox256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Twox128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blake2_256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blake2_128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Twox64Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blake2_128Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Never","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeLogger","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PrefixIterator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StorageIterator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, T, H&gt; RefUnwindSafe for StorageKeyIterator&lt;K, T, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Prefix, Value, QueryKind, OnEmpty&gt; RefUnwindSafe for StorageValue&lt;Prefix, Value, QueryKind, OnEmpty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnEmpty: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prefix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;QueryKind: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Prefix, Hasher, Key, Value, QueryKind, OnEmpty&gt; RefUnwindSafe for StorageMap&lt;Prefix, Hasher, Key, Value, QueryKind, OnEmpty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;OnEmpty: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prefix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;QueryKind: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind, OnEmpty&gt; RefUnwindSafe for StorageDoubleMap&lt;Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind, OnEmpty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;OnEmpty: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prefix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;QueryKind: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OptionQuery","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueQuery","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; RefUnwindSafe for FilterStackGuard&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; RefUnwindSafe for ClearFilterGuard&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as FilterStack&lt;T&gt;&gt;::Stack: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Created, Removed, K, T&gt; RefUnwindSafe for StorageMapShim&lt;S, Created, Removed, K, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Created: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Removed: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, Imbalance, Part1, Target1, Part2, Target2&gt; RefUnwindSafe for SplitTwoWays&lt;Balance, Imbalance, Part1, Target1, Part2, Target2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Imbalance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Part1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Part2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Target1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Target2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithdrawReasons","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestRandomness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetDefault","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U128CurrencyToVote","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SaturatingCurrencyToVote","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PalletVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistenceRequirement","synthetic":true,"types":[]},{"text":"impl&lt;B, P&gt; RefUnwindSafe for SignedImbalance&lt;B, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Imbalance&lt;B&gt;&gt;::Opposite: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BalanceStatus","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; RefUnwindSafe for DispatchTime&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DispatchInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PostDispatchInfo","synthetic":true,"types":[]},{"text":"impl&lt;WD, CD, PF&gt; RefUnwindSafe for FunctionOf&lt;WD, CD, PF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CD: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;WD: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeDbWeight","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; RefUnwindSafe for WeightToFeeCoefficient&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IdentityFee&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pays","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DispatchClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockExecutionWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtrinsicBaseWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksDbWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParityDbWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameTransactionPriority","synthetic":true,"types":[]}];
implementors["frame_support_procedural_tools"] = [{"text":"impl RefUnwindSafe for StopParse","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for Braces&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for Brackets&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for Parens&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T, V&gt; RefUnwindSafe for PunctuatedInner&lt;P, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoTrailing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trailing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OuterAttributes","synthetic":true,"types":[]}];
implementors["frame_support_test"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_system"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CheckMortality&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CheckGenesis&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CheckNonce&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CheckSpecVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CheckTxVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CheckWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; RefUnwindSafe for EventRecord&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Index, AccountData&gt; RefUnwindSafe for AccountInfo&lt;Index, AccountData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountData: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LastRuntimeUpgradeInfo","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for EnsureRoot&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for EnsureSigned&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Who, AccountId&gt; RefUnwindSafe for EnsureSignedBy&lt;Who, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Who: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for EnsureNone&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EnsureNever&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, L, R&gt; RefUnwindSafe for EnsureOneOf&lt;AccountId, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CallOnCreatedAccount&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CallKillAccount&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ChainContext&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Phase","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for RawOrigin&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForAll","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForAny","synthetic":true,"types":[]},{"text":"impl&lt;T, OverarchingCall&gt; RefUnwindSafe for SubmitTransaction&lt;T, OverarchingCall&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OverarchingCall: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, C, X&gt; RefUnwindSafe for Signer&lt;T, C, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Public: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Account&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Public: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pallet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for _GeneratedPrefixForStorageAccount&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for _GeneratedPrefixForStorageBlockHash&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for _GeneratedPrefixForStorageLastRuntimeUpgrade&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Event&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["frame_system_benchmarking"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; RefUnwindSafe for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; RefUnwindSafe for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; RefUnwindSafe for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; RefUnwindSafe for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; RefUnwindSafe for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Shared&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; RefUnwindSafe for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; RefUnwindSafe for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; RefUnwindSafe for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; RefUnwindSafe for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Buffered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for BufferUnordered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitSink&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; RefUnwindSafe for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for FuturesUnordered&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !RefUnwindSafe for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; RefUnwindSafe for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; RefUnwindSafe for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; RefUnwindSafe for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NotifyHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLockAcquire&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLockAcquired&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !RefUnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !RefUnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalSpawner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPoolBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl RefUnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; RefUnwindSafe for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; RefUnwindSafe for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Remote&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; RefUnwindSafe for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; RefUnwindSafe for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; RefUnwindSafe for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; RefUnwindSafe for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; RefUnwindSafe for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; RefUnwindSafe for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; RefUnwindSafe for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; !RefUnwindSafe for ReuniteError&lt;T, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; !RefUnwindSafe for SplitSink&lt;S, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; RefUnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; RefUnwindSafe for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; RefUnwindSafe for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; RefUnwindSafe for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; RefUnwindSafe for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; RefUnwindSafe for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; RefUnwindSafe for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; RefUnwindSafe for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ex&gt; RefUnwindSafe for Executor01As03&lt;Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Compat01As03&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, SinkItem&gt; !RefUnwindSafe for Compat01As03Sink&lt;S, SinkItem&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Compat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; RefUnwindSafe for CompatSink&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; RefUnwindSafe for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; !RefUnwindSafe for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for BiLockAcquire&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hash256_std_hasher"] = [{"text":"impl RefUnwindSafe for Hash256StdHasher","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac_drbg"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for HmacDRBG&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as FixedOutput&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; RefUnwindSafe for Key&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'v&gt; !RefUnwindSafe for Value&lt;'v&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'f&gt; !RefUnwindSafe for Slot&lt;'s, 'f&gt;","synthetic":true,"types":[]}];
implementors["matchers"] = [{"text":"impl&lt;S, A&gt; RefUnwindSafe for Pattern&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, A&gt; RefUnwindSafe for Matcher&lt;'a, S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memory_db"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for MemCounter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NoopTracker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, KF, T, M&gt; RefUnwindSafe for MemoryDB&lt;H, KF, T, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;KF: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;KF as KeyFunction&lt;H&gt;&gt;::Key: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for HashKey&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for PrefixedKey&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for LegacyPrefixedKey&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["merlin"] = [{"text":"impl RefUnwindSafe for Transcript","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranscriptRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranscriptRngBuilder","synthetic":true,"types":[]}];
implementors["node_bench"] = [{"text":"impl RefUnwindSafe for Opt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstructionBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstructionBenchmark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PoolTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transactions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BenchmarkOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NsFormatter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportBenchmark","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SimpleTrie&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TempDatabase","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParityDbWrapper","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatabaseType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KUSAMA_STATE_DISTRIBUTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrieReadBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrieReadBenchmark","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Storage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrieWriteBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrieWriteBenchmark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizePool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatabaseSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PoolBenchmarkDescription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PoolBenchmark","synthetic":true,"types":[]}];
implementors["node_cli"] = [{"text":"impl RefUnwindSafe for Cli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Subcommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extensions","synthetic":true,"types":[]}];
implementors["node_executor"] = [{"text":"impl RefUnwindSafe for Executor","synthetic":true,"types":[]}];
implementors["node_inspect"] = [{"text":"impl RefUnwindSafe for DebugPrinter","synthetic":true,"types":[]},{"text":"impl&lt;TBlock, TPrinter&nbsp;=&nbsp;DebugPrinter&gt; !RefUnwindSafe for Inspector&lt;TBlock, TPrinter&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; RefUnwindSafe for BlockAddress&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; RefUnwindSafe for ExtrinsicAddress&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InspectCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InspectSubCmd","synthetic":true,"types":[]}];
implementors["node_primitives"] = [{"text":"impl RefUnwindSafe for ReporterAppCrypto","synthetic":true,"types":[]}];
implementors["node_rpc"] = [{"text":"impl&lt;C, F, P&gt; !RefUnwindSafe for LightDeps&lt;C, F, P&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BabeDeps","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for GrandpaDeps&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, P, SC, B&gt; !RefUnwindSafe for FullDeps&lt;C, P, SC, B&gt;","synthetic":true,"types":[]}];
implementors["node_runtime"] = [{"text":"impl RefUnwindSafe for DealWithFees","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockHashCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumBlockWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AvailableBlockRatio","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumExtrinsicWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumBlockLength","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DepositBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DepositFactor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxSignatories","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProxyDepositBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProxyDepositFactor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxProxies","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnnouncementDepositBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnnouncementDepositFactor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxPending","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumSchedulerWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxScheduledPerBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpochDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpectedBlockTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistentialDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxLocks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionByteFee","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetBlockFullness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdjustmentVariable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinimumMultiplier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UncleGenerations","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SessionKeys","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisabledValidatorsThreshold","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SessionsPerEra","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BondingDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SlashDeferDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RewardCurve","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxNominatorRewardedPerValidator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElectionLookahead","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxIterations","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinSolutionScoreBump","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffchainSolutionWeightLimit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LaunchPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VotingPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FastTrackVotingPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstantAllowed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinimumDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnactmentPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CooloffPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreimageByteDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxVotes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxProposals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CouncilMotionDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CouncilMaxProposals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CouncilMaxMembers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CandidacyBond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VotingBond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TermDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DesiredMembers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DesiredRunnersUp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElectionsPhragmenModuleId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TechnicalMotionDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TechnicalMaxProposals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TechnicalMaxMembers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProposalBond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProposalBondMinimum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpendPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Burn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TipCountdown","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TipFindersFee","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TipReportDepositBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataDepositPerByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BountyDepositBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BountyDepositPayoutDelay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TreasuryModuleId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BountyUpdatePeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumReasonLength","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BountyCuratorDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BountyValueMinimum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TombstoneDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RentByteFee","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RentDepositOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SurchargeReward","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SessionDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImOnlineUnsignedPriority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StakingUnsignedPriority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffencesWeightSoftLimit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubAccountDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxSubAccounts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxAdditionalFields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxRegistrars","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigDepositBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FriendDepositFactor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxFriends","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecoveryDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CandidateDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WrongSideDeduction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxStrikes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RotationPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeriodSpend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxLockDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChallengePeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocietyModuleId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinVestedTransfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PalletInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeApi","synthetic":true,"types":[]},{"text":"impl&lt;Block, C&gt; !RefUnwindSafe for RuntimeApiImpl&lt;Block, C&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProxyType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginCaller","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Call","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Author","synthetic":true,"types":[]}];
implementors["node_template"] = [{"text":"impl RefUnwindSafe for Executor","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; RefUnwindSafe for FullDeps&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["node_template_runtime"] = [{"text":"impl RefUnwindSafe for BlockHashCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumBlockWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AvailableBlockRatio","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumExtrinsicWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumBlockLength","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistentialDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxLocks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionByteFee","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PalletInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeApi","synthetic":true,"types":[]},{"text":"impl&lt;Block, C&gt; !RefUnwindSafe for RuntimeApiImpl&lt;Block, C&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginCaller","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Call","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SessionKeys","synthetic":true,"types":[]}];
implementors["node_testing"] = [{"text":"impl RefUnwindSafe for GenesisParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BenchKeyring","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BenchDb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockContent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BlockContentIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BenchContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatabaseType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyTypes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Profile","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl RefUnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sign","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl RefUnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;RefUnwindSafe + UnwindSafe&gt; RefUnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["pallet_assets"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AssetId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, AssetId&gt; RefUnwindSafe for RawEvent&lt;AccountId, Balance, AssetId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;AssetId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_atomic_swap"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for PendingSwap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::SwapAction: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, C&gt; RefUnwindSafe for BalanceSwapAction&lt;AccountId, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Currency&lt;AccountId&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PendingSwaps&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, PendingSwap&gt; RefUnwindSafe for RawEvent&lt;AccountId, PendingSwap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PendingSwap: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::SwapAction: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_aura"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AuthorityId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Authorities&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_authority_discovery"] = [{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_authorship"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for SealVerify&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; RefUnwindSafe for OnePerAuthorPerHeight&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Header: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_babe"] = [{"text":"impl&lt;FullIdentification&gt; RefUnwindSafe for BabeEquivocationOffence&lt;FullIdentification&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FullIdentification: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; RefUnwindSafe for EquivocationHandler&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternalTrigger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SameAuthoritiesForever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpochIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Authorities","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisSlot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CurrentSlot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Randomness","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::KeyOwnerProof: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_balances"] = [{"text":"impl&lt;T, I&gt; RefUnwindSafe for PositiveImbalance&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Subtrait&lt;I&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for NegativeImbalance&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Subtrait&lt;I&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; RefUnwindSafe for BalanceLock&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; RefUnwindSafe for AccountData&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for TotalIssuance&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Account&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Locks&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, I&gt; RefUnwindSafe for RawEvent&lt;AccountId, Balance, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reasons","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_collective"] = [{"text":"impl RefUnwindSafe for PrimeDefaultVote","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MoreThanMajorityThenPrimeDefaultVote","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, BlockNumber&gt; RefUnwindSafe for Votes&lt;AccountId, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Proposals&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for ProposalOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Voting&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ProposalCount&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Members&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Prime&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, I&gt; RefUnwindSafe for EnsureMember&lt;AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, AccountId, I&gt; RefUnwindSafe for EnsureMembers&lt;N, AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D, AccountId, I&gt; RefUnwindSafe for EnsureProportionMoreThan&lt;N, D, AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D, AccountId, I&gt; RefUnwindSafe for EnsureProportionAtLeast&lt;N, D, AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, I&gt; RefUnwindSafe for RawOrigin&lt;AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, AccountId, I&gt; RefUnwindSafe for RawEvent&lt;Hash, AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Proposal: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_contracts"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for GasMeter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Schedule&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFnWeights","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstructionWeights","synthetic":true,"types":[]},{"text":"impl&lt;CodeHash, Balance, BlockNumber&gt; RefUnwindSafe for RawAliveContractInfo&lt;CodeHash, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;CodeHash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, Hasher&gt; RefUnwindSafe for RawTombstoneContractInfo&lt;H, Hasher&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrieIdFromParentCounter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultSignedClaimHandicap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultTombstoneDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultStorageSizeOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultRentByteFee","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultRentDepositOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultSurchargeReward","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultMaxDepth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultMaxValueSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SimpleAddressDeterminer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PristineCode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CodeStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccountCounter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ContractInfoOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Config&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnCode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ContractInfo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hashing: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId, Hash&gt; RefUnwindSafe for RawEvent&lt;Balance, AccountId, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_contracts_primitives"] = [{"text":"impl RefUnwindSafe for ContractExecResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecReturnValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContractAccessError","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; RefUnwindSafe for RentProjection&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorOrigin","synthetic":true,"types":[]}];
implementors["pallet_contracts_rpc"] = [{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for CallRequest&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpcContractExecResult","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; RefUnwindSafe for Contracts&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockHash, BlockNumber, AccountId, Balance&gt; !RefUnwindSafe for Client&lt;BlockHash, BlockNumber, AccountId, Balance&gt;","synthetic":true,"types":[]}];
implementors["pallet_democracy"] = [{"text":"impl RefUnwindSafe for Vote","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, Hash, Balance&gt; RefUnwindSafe for ReferendumStatus&lt;BlockNumber, Hash, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; RefUnwindSafe for Tally&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; RefUnwindSafe for Delegations&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicPropCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PublicProps&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DepositOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Preimages&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferendumCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LowestUnbaked","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ReferendumInfoOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for VotingOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Locks&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LastTabledWasExternal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NextExternal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Blacklist&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Cancellations&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VoteThreshold","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; RefUnwindSafe for AccountVote&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId, BlockNumber&gt; RefUnwindSafe for Voting&lt;Balance, AccountId, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conviction","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, Hash, Balance&gt; RefUnwindSafe for ReferendumInfo&lt;BlockNumber, Hash, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnvoteScope","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; RefUnwindSafe for PreimageStatus&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId, Hash, BlockNumber&gt; RefUnwindSafe for RawEvent&lt;Balance, AccountId, Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_elections"] = [{"text":"impl&lt;Balance&gt; RefUnwindSafe for VoterInfo&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PresentationDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TermDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DesiredSeats","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Members&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VoteCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ApprovalsOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RegisterInfoOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for VoterInfoOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Voters&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NextVoterSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VoterCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Candidates&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CandidateCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NextFinalize&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Leaderboard&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CellStatus","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_elections_phragmen"] = [{"text":"impl&lt;AccountId&gt; RefUnwindSafe for DefunctVoter&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Members&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RunnersUp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElectionRounds","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Voting&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Candidates&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Renouncing","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId&gt; RefUnwindSafe for RawEvent&lt;Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_evm"] = [{"text":"impl RefUnwindSafe for Account","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Log","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vicinity","synthetic":true,"types":[]},{"text":"impl&lt;'vicinity, T&gt; RefUnwindSafe for Backend&lt;'vicinity, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnsureAddressSame","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for EnsureAddressRoot&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for EnsureAddressNever&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnsureAddressTruncated","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdentityAddressMapping","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for HashedAddressMapping&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemChainId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisAccount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECRecover","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ripemd160","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]}];
implementors["pallet_example"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;DefaultInstance&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WatchDummy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for RawEvent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;DefaultInstance&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_example_offchain_worker"] = [{"text":"impl&lt;Public, BlockNumber&gt; RefUnwindSafe for PricePayload&lt;Public, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Public: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Public: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as SigningTypes&gt;::Signature: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestAuthId","synthetic":true,"types":[]}];
implementors["pallet_example_parallel"] = [{"text":"impl RefUnwindSafe for EnlistedParticipant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_grandpa"] = [{"text":"impl&lt;I, R, O&gt; RefUnwindSafe for EquivocationHandler&lt;I, R, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;FullIdentification&gt; RefUnwindSafe for GrandpaEquivocationOffence&lt;FullIdentification&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FullIdentification: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrandpaTimeSlot","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for OldStoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for StoredPendingChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for StoredState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::KeyOwnerProof: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_identity"] = [{"text":"impl RefUnwindSafe for IdentityFields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdentityInfo","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; RefUnwindSafe for Registration&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId&gt; RefUnwindSafe for RegistrarInfo&lt;Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IdentityOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SuperOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubsOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Registrars&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; RefUnwindSafe for Judgement&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdentityField","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_im_online"] = [{"text":"impl&lt;BlockNumber&gt; RefUnwindSafe for Heartbeat&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AuthorityId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Offender&gt; RefUnwindSafe for UnresponsivenessOffence&lt;Offender&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AuthorityId, IdentificationTuple&gt; RefUnwindSafe for RawEvent&lt;AuthorityId, IdentificationTuple&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;IdentificationTuple: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::AuthorityId as RuntimeAppPublic&gt;::Signature: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_indices"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountIndex: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Accounts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, AccountIndex&gt; RefUnwindSafe for RawEvent&lt;AccountId, AccountIndex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountIndex: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountIndex: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, AccountIndex&gt; RefUnwindSafe for Address&lt;AccountId, AccountIndex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountIndex: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_membership"] = [{"text":"impl RefUnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Event, I&gt; RefUnwindSafe for RawEvent&lt;AccountId, Event, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Event: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_multisig"] = [{"text":"impl&lt;BlockNumber&gt; RefUnwindSafe for Timepoint&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, Balance, AccountId&gt; RefUnwindSafe for Multisig&lt;BlockNumber, Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Multisigs&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Calls&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, BlockNumber, CallHash&gt; RefUnwindSafe for RawEvent&lt;AccountId, BlockNumber, CallHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;CallHash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_nicks"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_node_authorization"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WellKnownNodes","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Owners&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdditionalConnections","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_offences"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_offences_benchmarking"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_proxy"] = [{"text":"impl&lt;AccountId, ProxyType, BlockNumber&gt; RefUnwindSafe for ProxyDefinition&lt;AccountId, ProxyType, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProxyType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Hash, BlockNumber&gt; RefUnwindSafe for Announcement&lt;AccountId, Hash, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Proxies&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Announcements&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, ProxyType, Hash&gt; RefUnwindSafe for RawEvent&lt;AccountId, ProxyType, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ProxyType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::CallHasher as Hash&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::ProxyType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_randomness_collective_flip"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_recovery"] = [{"text":"impl&lt;BlockNumber, Balance, AccountId&gt; RefUnwindSafe for ActiveRecovery&lt;BlockNumber, Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, Balance, AccountId&gt; RefUnwindSafe for RecoveryConfig&lt;BlockNumber, Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Recoverable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ActiveRecoveries&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Proxy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_scheduler"] = [{"text":"impl&lt;Call, BlockNumber, PalletsOrigin, AccountId&gt; RefUnwindSafe for ScheduledV2&lt;Call, BlockNumber, PalletsOrigin, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PalletsOrigin: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Agenda&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; RefUnwindSafe for RawEvent&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_scored_pool"] = [{"text":"impl RefUnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Score: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, I&gt; RefUnwindSafe for RawEvent&lt;AccountId, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&lt;I&gt;&gt;::Score: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_session"] = [{"text":"impl&lt;Period, Offset&gt; RefUnwindSafe for PeriodicSessions&lt;Period, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Period: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestSessionHandler","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Keys: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::ValidatorId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Inner&gt; RefUnwindSafe for FindAccountFromAuthorIndex&lt;T, Inner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Inner: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Keys: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for NoteHistoricalRoot&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ProvingTrie&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hashing: Hasher + RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_session_benchmarking"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_society"] = [{"text":"impl&lt;Balance, BlockNumber&gt; RefUnwindSafe for Payout&lt;Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for Bid&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for GenesisConfig&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&lt;I&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Founder&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Rules&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Candidates&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for SuspendedCandidates&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Pot&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Head&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Members&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for SuspendedMembers&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EnsureFounder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vote","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Judgement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VouchingStatus","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for BidKind&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&lt;I&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, I&gt; RefUnwindSafe for RawEvent&lt;AccountId, Balance, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_staking"] = [{"text":"impl RefUnwindSafe for CompactAssignments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ActiveEraInfo","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for EraRewardPoints&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValidatorPrefs","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; RefUnwindSafe for UnlockChunk&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for StakingLedger&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for Nominations&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for IndividualExposure&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for Exposure&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for UnappliedSlash&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for ElectionResult&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElectionSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValidatorCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinimumValidatorCount","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Invulnerables&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bonded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Ledger&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Payee&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Validators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Nominators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CurrentEra","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ActiveEra","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErasStartSessionIndex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ErasStakers&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ErasStakersClipped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ErasValidatorPrefs&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ErasValidatorReward&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ErasRewardPoints&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ErasTotalStake&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForceEra","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SlashRewardFraction","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CanceledSlashPayout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for UnappliedSlashes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SnapshotValidators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SnapshotNominators&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for QueuedElected&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueuedScore","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EraElectionStatus&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsCurrentSessionFinal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StashOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ExposureOf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; RefUnwindSafe for FilterHistoricalOffences&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for StakerStatus&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for RewardDestination&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElectionCompute","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; RefUnwindSafe for ElectionStatus&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Forcing","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId&gt; RefUnwindSafe for RawEvent&lt;Balance, AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SlashingSpans","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffchainElectionError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_sudo"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_template"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for RawEvent&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_timestamp"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Now&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Moment: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment"] = [{"text":"impl&lt;C, OU&gt; RefUnwindSafe for CurrencyAdapter&lt;C, OU&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;OU: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, V, M&gt; RefUnwindSafe for TargetedFeeAdjustment&lt;T, S, V, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NextFeeMultiplier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ChargeTransactionPayment&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::OnChargeTransaction as OnChargeTransaction&lt;T&gt;&gt;::Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment_rpc"] = [{"text":"impl&lt;BlockHash, ResponseType&gt; !RefUnwindSafe for Client&lt;BlockHash, ResponseType&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; RefUnwindSafe for TransactionPayment&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["pallet_transaction_payment_rpc_runtime_api"] = [{"text":"impl&lt;Balance&gt; RefUnwindSafe for RuntimeDispatchInfo&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_treasury"] = [{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for Proposal&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber, Hash&gt; RefUnwindSafe for OpenTip&lt;AccountId, Balance, BlockNumber, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance, BlockNumber&gt; RefUnwindSafe for Bounty&lt;AccountId, Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance9","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance11","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance14","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance15","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultInstance","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Tips&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Reasons&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for BountyCount&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Bounties&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for BountyDescriptions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for BountyApprovals&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Module&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, BlockNumber&gt; RefUnwindSafe for BountyStatus&lt;AccountId, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, AccountId, Hash, I&gt; RefUnwindSafe for RawEvent&lt;Balance, AccountId, Hash, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Error&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Call&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&lt;I&gt;&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_utility"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Trait&gt;::Call: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["pallet_vesting"] = [{"text":"impl&lt;Balance, BlockNumber&gt; RefUnwindSafe for VestingInfo&lt;Balance, BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for GenesisConfig&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Vesting&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Balance&gt; RefUnwindSafe for RawEvent&lt;AccountId, Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Config&gt;::BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as Config&gt;::Lookup as StaticLookup&gt;::Source: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SubstrateWeight&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parity_scale_codec"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OptionBool","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Compact&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; RefUnwindSafe for Ref&lt;'a, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parity_util_mem"] = [{"text":"impl !RefUnwindSafe for MallocSizeOfOps","synthetic":true,"types":[]}];
implementors["parity_wasm"] = [{"text":"impl RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemorySection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CustomSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizableLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarUint32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarUint7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uint8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarUint1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarInt7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uint32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarInt32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarInt64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uint64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarUint64","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CountedList&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for CountedWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for CountedListWriter&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instructions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BrTableData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Func","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataSegment","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IndexMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleNameSubsection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionNameSubsection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalNameSubsection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelocSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unparsed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportCountType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Section","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for External","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Internal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableElementType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instruction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelocationEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for SignatureBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for SignaturesBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FunctionBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for TypeRefBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FuncBodyBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionDefinition","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for DataSegmentBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ExportBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ExportInternalBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for GlobalBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ImportBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for MemoryBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ModuleBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for TableBuilder&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableEntryDefinition","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["phragmen_balancing"] = [{"text":"impl RefUnwindSafe for ElectionType","synthetic":true,"types":[]}];
implementors["phragmms_balancing"] = [{"text":"impl RefUnwindSafe for ElectionType","synthetic":true,"types":[]}];
implementors["primitive_types"] = [{"text":"impl RefUnwindSafe for U128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for H160","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for H256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for H512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SmallRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl RefUnwindSafe for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["reduce"] = [{"text":"impl RefUnwindSafe for ElectionType","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["rlp"] = [{"text":"impl RefUnwindSafe for PayloadInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Rlp&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'view&gt; !RefUnwindSafe for RlpIterator&lt;'a, 'view&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RlpStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecoderError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Prototype","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl RefUnwindSafe for FxHasher","synthetic":true,"types":[]}];
implementors["rustc_hex"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for ToHexIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FromHexIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["sc_authority_discovery"] = [{"text":"impl !RefUnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl&lt;Client, Network, Block, DhtEventStream&gt; !RefUnwindSafe for Worker&lt;Client, Network, Block, DhtEventStream&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WorkerConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Role","synthetic":true,"types":[]}];
implementors["sc_basic_authorship"] = [{"text":"impl&lt;A, B, C&gt; !RefUnwindSafe for ProposerFactory&lt;A, B, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, Block, C, A&gt; !RefUnwindSafe for Proposer&lt;B, Block, C, A&gt;","synthetic":true,"types":[]}];
implementors["sc_block_builder"] = [{"text":"impl&lt;Block, StateBackend&gt; RefUnwindSafe for BuiltBlock&lt;Block, StateBackend&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;StateBackend as Backend&lt;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing&gt;&gt;::Transaction: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Block, A, B&gt; RefUnwindSafe for BlockBuilder&lt;'a, Block, A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as ProvideRuntimeApi&lt;Block&gt;&gt;::Api: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Extrinsic: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_chain_spec"] = [{"text":"impl&lt;G, E&nbsp;=&nbsp;Option&lt;()&gt;&gt; !RefUnwindSafe for ChainSpec&lt;G, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for LightSyncState&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SerializableLightSyncState","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber, T&gt; RefUnwindSafe for Forks&lt;BlockNumber, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Group&gt;::Fork: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_cli"] = [{"text":"impl RefUnwindSafe for BuildSpecCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckBlockCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportBlocksCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportStateCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportBlocksCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PurgeChainCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InsertCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InspectKeyCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateNodeKeyCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InspectNodeKeyCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VanityCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RevertCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatabaseParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecutionStrategiesParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeystoreParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetworkParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeKeyParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffchainWorkerParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PruningParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SharedParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionPoolParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericNumber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockNumberOrHash","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CryptoSchemeFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputTypeFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetworkSchemeFlag","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; !RefUnwindSafe for Runner&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeySubcommand","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmExecutionMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TracingReceiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeKeyType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CryptoScheme","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecutionStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpcMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Database","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffchainWorkerEnabled","synthetic":true,"types":[]}];
implementors["sc_client_api"] = [{"text":"impl&lt;Block&gt; RefUnwindSafe for ImportSummary&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, B&gt; RefUnwindSafe for ClientImportOperation&lt;Block, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&lt;Block&gt;&gt;::BlockImportOperation: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, State, Block&gt; RefUnwindSafe for KeyIterator&lt;'a, State, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;State: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewBlockState","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for ClientInfo&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemorySize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StateDbMemoryInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IoInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsageInfo","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for BlockImportNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for FinalityNotification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecutionStrategies","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for ExecutionExtensions&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for Blockchain&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for BlockImportOperation&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: Codec + Ord + RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for Backend&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; RefUnwindSafe for RemoteCallRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; RefUnwindSafe for RemoteHeaderRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; RefUnwindSafe for RemoteReadRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; RefUnwindSafe for RemoteReadChildRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; RefUnwindSafe for RemoteChangesRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; RefUnwindSafe for ChangesProof&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; RefUnwindSafe for RemoteBodyRequest&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Data, Request&gt; RefUnwindSafe for LocalOrRemote&lt;Data, Request&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Request: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; RefUnwindSafe for ImportDisplaced&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; RefUnwindSafe for FinalizationDisplaced&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; RefUnwindSafe for LeafSet&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, N&gt; RefUnwindSafe for Undo&lt;'a, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChangeSet","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for StorageNotifications&lt;Block&gt;","synthetic":true,"types":[]}];
implementors["sc_client_db"] = [{"text":"impl&lt;Block&gt; !RefUnwindSafe for RefTrackingState&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DatabaseSettings","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for BlockchainDb&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for BlockImportOperation&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for Backend&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DatabaseSettingsSrc","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for LightStorage&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalStorage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyTracker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadWriteTracker","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for BenchmarkingState&lt;B&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus"] = [{"text":"impl&lt;B, Block&gt; RefUnwindSafe for LongestChain&lt;B, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus_aura"] = [{"text":"impl&lt;C, P, CAW&gt; !RefUnwindSafe for AuraVerifier&lt;C, P, CAW&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, I, P&gt; RefUnwindSafe for AuraBlockImport&lt;Block, C, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus_babe"] = [{"text":"impl RefUnwindSafe for Epoch","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for BabeIntermediate&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;B, C, E, I, SO, SC, CAW&gt; !RefUnwindSafe for BabeParams&lt;B, C, E, I, SO, SC, CAW&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for BabeWorker&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for BabeLink&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client, SelectChain, CAW&gt; !RefUnwindSafe for BabeVerifier&lt;Block, Client, SelectChain, CAW&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client, I&gt; !RefUnwindSafe for BabeBlockImport&lt;Block, Client, I&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus_babe_rpc"] = [{"text":"impl&lt;B, C, SC&gt; !RefUnwindSafe for BabeRpcHandler&lt;B, C, SC&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpochAuthorship","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]}];
implementors["sc_consensus_epochs"] = [{"text":"impl&lt;H, Block&gt; RefUnwindSafe for HeaderBackendDescendentBuilder&lt;H, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for EpochHeader&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Epoch&gt;::SlotNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; RefUnwindSafe for EpochIdentifier&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IncrementedEpoch&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number, E&gt; RefUnwindSafe for EpochChanges&lt;Hash, Number, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Epoch&gt;::SlotNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpochIdentifierPosition","synthetic":true,"types":[]},{"text":"impl&lt;E, ERef&gt; RefUnwindSafe for ViableEpoch&lt;E, ERef&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ERef: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number, E&gt; RefUnwindSafe for ViableEpochDescriptor&lt;Hash, Number, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Epoch&gt;::SlotNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for PersistedEpoch&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for PersistedEpochHeader&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Epoch&gt;::SlotNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number, E&gt; RefUnwindSafe for EpochChangesV0&lt;Hash, Number, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_consensus_manual_seal"] = [{"text":"impl&lt;B, F, CB&gt; !RefUnwindSafe for FinalizeBlockParams&lt;B, F, CB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, BI, SC, C, E, P&gt; !RefUnwindSafe for SealBlockParams&lt;'a, B, BI, SC, C, E, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, BI, E, C, A, SC, CS&gt; !RefUnwindSafe for ManualSealParams&lt;B, BI, E, C, A, SC, CS&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, BI, E, C, A, SC&gt; !RefUnwindSafe for InstantSealParams&lt;B, BI, E, C, A, SC&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; !RefUnwindSafe for BabeConsensusDataProvider&lt;B, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !RefUnwindSafe for Client&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !RefUnwindSafe for ManualSeal&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; RefUnwindSafe for CreatedBlock&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !RefUnwindSafe for EngineCommand&lt;Hash&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus_pow"] = [{"text":"impl&lt;Block, Algorithm, C&gt; !RefUnwindSafe for MiningWorker&lt;Block, Algorithm, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, D&gt; RefUnwindSafe for MiningMetadata&lt;H, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, Algorithm, C&gt; RefUnwindSafe for MiningBuild&lt;Block, Algorithm, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Algorithm as PowAlgorithm&lt;Block&gt;&gt;::Difficulty: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;C as ProvideRuntimeApi&lt;Block&gt;&gt;::Api as ApiExt&lt;Block&gt;&gt;::StateBackend as Backend&lt;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing&gt;&gt;::Transaction: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Difficulty&gt; RefUnwindSafe for PowIntermediate&lt;Difficulty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Difficulty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Difficulty&gt; RefUnwindSafe for PowAux&lt;Difficulty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Difficulty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I, C, S, Algorithm, CAW&gt; !RefUnwindSafe for PowBlockImport&lt;B, I, C, S, Algorithm, CAW&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, Algorithm&gt; RefUnwindSafe for PowVerifier&lt;B, Algorithm&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Algorithm: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for Error&lt;B&gt;","synthetic":true,"types":[]}];
implementors["sc_consensus_slots"] = [{"text":"impl RefUnwindSafe for SlotInfo","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for SlotResult&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SlotDuration&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, S&gt; RefUnwindSafe for CheckedHeader&lt;H, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_executor"] = [{"text":"impl&lt;D&gt; !RefUnwindSafe for NativeExecutor&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WasmExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmExecutionMethod","synthetic":true,"types":[]}];
implementors["sc_executor_common"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SupervisorFuncIndex","synthetic":true,"types":[]},{"text":"impl&lt;'a, FE&gt; !RefUnwindSafe for GuestExternals&lt;'a, FE&gt;","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; !RefUnwindSafe for SandboxInstance&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GuestEnvironment","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; !RefUnwindSafe for UnregisteredInstance&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl&lt;FR&gt; !RefUnwindSafe for Store&lt;FR&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstantiationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmModuleInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataSegmentsSnapshot","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for InvokeMethod&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["sc_executor_wasmi"] = [{"text":"impl RefUnwindSafe for WasmiRuntime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WasmiInstance","synthetic":true,"types":[]}];
implementors["sc_finality_grandpa"] = [{"text":"impl&lt;H, N&gt; !RefUnwindSafe for SharedAuthoritySet&lt;H, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; RefUnwindSafe for AuthoritySet&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header&gt; RefUnwindSafe for FinalityProofFragment&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Header as Header&gt;::Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, Block&gt; !RefUnwindSafe for FinalityProofProvider&lt;B, Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for GrandpaJustificationSender&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for GrandpaJustificationStream&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Backend, Block, Client, SC&gt; !RefUnwindSafe for GrandpaBlockImport&lt;Backend, Block, Client, SC&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for GrandpaJustification&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;BE, Block, Client&gt; !RefUnwindSafe for GrandpaLightBlockImport&lt;BE, Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for BeforeBestBlockBy&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreeQuartersOfTheUnfinalizedChain","synthetic":true,"types":[]},{"text":"impl&lt;Block, B&gt; !RefUnwindSafe for VotingRulesBuilder&lt;Block, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SharedVoterState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, SC&gt; !RefUnwindSafe for LinkHalf&lt;Block, C, SC&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, C, N, SC, VR&gt; !RefUnwindSafe for GrandpaParams&lt;Block, C, N, SC, VR&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sc_finality_grandpa_rpc"] = [{"text":"impl&lt;AuthoritySet, VoterState, Block, ProofProvider&gt; !RefUnwindSafe for GrandpaRpcHandler&lt;AuthoritySet, VoterState, Block, ProofProvider&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Notification, Hash&gt; !RefUnwindSafe for Client&lt;Notification, Hash&gt;","synthetic":true,"types":[]}];
implementors["sc_informant"] = [{"text":"impl RefUnwindSafe for OutputFormat","synthetic":true,"types":[]}];
implementors["sc_keystore"] = [{"text":"impl !RefUnwindSafe for LocalKeystore","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sc_light"] = [{"text":"impl&lt;S, H&gt; !RefUnwindSafe for Backend&lt;S, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, S&gt; RefUnwindSafe for ImportOperation&lt;Block, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for GenesisOrUnavailableState&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Blockchain&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, L&gt; RefUnwindSafe for GenesisCallExecutor&lt;B, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, H, B, S&gt; !RefUnwindSafe for LightDataChecker&lt;E, H, B, S&gt;","synthetic":true,"types":[]}];
implementors["sc_network"] = [{"text":"impl&lt;B&gt; RefUnwindSafe for PeerInfo&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; !RefUnwindSafe for NetworkService&lt;B, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; !RefUnwindSafe for NetworkWorker&lt;B, H&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NotificationSender","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for NotificationSenderReady&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for NetworkStatus&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DhtEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObservedRole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyncState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestFailure","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for OnDemand&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlwaysBadChecker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProtocolConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IncomingRequest","synthetic":true,"types":[]},{"text":"impl&lt;B, H&gt; !RefUnwindSafe for Params&lt;B, H&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyFinalityProofRequestBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmptyTransactionPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtocolId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiaddrWithPeerId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NetworkConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Role","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionImport","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParseErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransportConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NonReservedPeerMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeKeyConfig","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for Secret&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !RefUnwindSafe for QueuedSender&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, M&gt; !RefUnwindSafe for QueueGuard&lt;'a, M&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetworkState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Peer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotConnectedPeer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerEndpoint","synthetic":true,"types":[]}];
implementors["sc_network_gossip"] = [{"text":"impl&lt;B&gt; !RefUnwindSafe for GossipEngine&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicNotification","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiscardAll","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageIntent","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for ValidationResult&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sc_network_test"] = [{"text":"impl RefUnwindSafe for PassThroughVerifier","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for Peer&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FullPeerConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TestNet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ForceFinalized","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for JustificationTestNet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PeersClient","synthetic":true,"types":[]},{"text":"impl&lt;Transaction&gt; !RefUnwindSafe for BlockImportAdapter&lt;Transaction&gt;","synthetic":true,"types":[]}];
implementors["sc_offchain"] = [{"text":"impl&lt;Client, Storage, Block&gt; !RefUnwindSafe for OffchainWorkers&lt;Client, Storage, Block&gt;","synthetic":true,"types":[]}];
implementors["sc_peerset"] = [{"text":"impl RefUnwindSafe for ReputationChange","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PeersetHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IncomingIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeersetConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Peerset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]}];
implementors["sc_proposer_metrics"] = [{"text":"impl RefUnwindSafe for MetricsLink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metrics","synthetic":true,"types":[]}];
implementors["sc_rpc"] = [{"text":"impl !RefUnwindSafe for SubscriptionTaskExecutor","synthetic":true,"types":[]},{"text":"impl&lt;P, Client&gt; !RefUnwindSafe for Author&lt;P, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; !RefUnwindSafe for Chain&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Offchain&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; !RefUnwindSafe for State&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block, Client&gt; !RefUnwindSafe for ChildState&lt;Block, Client&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for System&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for Request&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TaskExecutor","synthetic":true,"types":[]}];
implementors["sc_rpc_api"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DenyUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Hash, BlockHash&gt; !RefUnwindSafe for Client&lt;Hash, BlockHash&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; RefUnwindSafe for ExtrinsicOrHash&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash, Header, SignedBlock&gt; !RefUnwindSafe for Client&lt;Number, Hash, Header, SignedBlock&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !RefUnwindSafe for Client&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; RefUnwindSafe for ReadProof&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; !RefUnwindSafe for Client&lt;Hash&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; !RefUnwindSafe for Client&lt;Hash, Number&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Health","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; RefUnwindSafe for PeerInfo&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number&gt; RefUnwindSafe for SyncState&lt;Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeRole","synthetic":true,"types":[]}];
implementors["sc_rpc_server"] = [{"text":"impl !RefUnwindSafe for RpcMiddleware","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RpcMetrics","synthetic":true,"types":[]}];
implementors["sc_service"] = [{"text":"impl&lt;'a, TBl, TExPool, TImpQu, TCl&gt; !RefUnwindSafe for BuildNetworkParams&lt;'a, TBl, TExPool, TImpQu, TCl&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KeystoreContainer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NetworkStarter","synthetic":true,"types":[]},{"text":"impl&lt;'a, TBl, TCl, TExPool, TRpc, Backend&gt; !RefUnwindSafe for SpawnTasksParams&lt;'a, TBl, TCl, TExPool, TRpc, Backend&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for NoopRpcExtensionBuilder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SpawnTaskHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RpcHandlers","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for NetworkStatusSinks&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TelemetryConnectionSinks","synthetic":true,"types":[]},{"text":"impl&lt;Client, Backend, SelectChain, ImportQueue, TransactionPool, Other&gt; !RefUnwindSafe for PartialComponents&lt;Client, Backend, SelectChain, ImportQueue, TransactionPool, Other&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RpcSession","synthetic":true,"types":[]},{"text":"impl&lt;C, P&gt; RefUnwindSafe for TransactionPoolAdapter&lt;C, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffchainWorkerConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PrometheusConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TaskType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeystoreConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpcMethods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasePath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;B, E&gt; !RefUnwindSafe for LocalCallExecutor&lt;B, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, E, Block, RA&gt; !RefUnwindSafe for Client&lt;B, E, Block, RA&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientConfig","synthetic":true,"types":[]}];
implementors["sc_service_test"] = [{"text":"impl&lt;TBl, TBackend, TExec, TRtApi, TExPool&gt; !RefUnwindSafe for TestNetComponents&lt;TBl, TBackend, TExec, TRtApi, TExPool&gt;","synthetic":true,"types":[]}];
implementors["sc_state_db"] = [{"text":"impl&lt;H&gt; RefUnwindSafe for ChangeSet&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for CommitSet&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraints","synthetic":true,"types":[]},{"text":"impl&lt;BlockHash, Key&gt; !RefUnwindSafe for StateDb&lt;BlockHash, Key&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Error&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PinError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PruningMode","synthetic":true,"types":[]}];
implementors["sc_sync_state_rpc"] = [{"text":"impl&lt;TBl, TCl&gt; !RefUnwindSafe for SyncStateRpcHandler&lt;TBl, TCl&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]}];
implementors["sc_telemetry"] = [{"text":"impl RefUnwindSafe for TelemetryConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TelemetryEndpoints","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Telemetry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TelemetryEvent","synthetic":true,"types":[]}];
implementors["sc_tracing"] = [{"text":"impl !RefUnwindSafe for ProfilingLayer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraceEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanDatum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Values","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogTraceHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TelemetryTraceHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TracingReceiver","synthetic":true,"types":[]}];
implementors["sc_transaction_graph"] = [{"text":"impl&lt;B&gt; !RefUnwindSafe for Pool&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex, Error&gt; RefUnwindSafe for ValidatedTransaction&lt;Hash, Ex, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; RefUnwindSafe for PruneStatus&lt;Hash, Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Extrinsic&gt; RefUnwindSafe for Transaction&lt;Hash, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Extrinsic: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; !RefUnwindSafe for BasePool&lt;Hash, Ex&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limit","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Ex&gt; RefUnwindSafe for Imported&lt;Hash, Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, BH&gt; !RefUnwindSafe for Watcher&lt;H, BH&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, BH&gt; !RefUnwindSafe for Sender&lt;H, BH&gt;","synthetic":true,"types":[]}];
implementors["sc_transaction_pool"] = [{"text":"impl&lt;Client, Block&gt; RefUnwindSafe for FullChainApi&lt;Client, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Client, F, Block&gt; RefUnwindSafe for LightChainApi&lt;Client, F, Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Client: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PoolApi, Block&gt; !RefUnwindSafe for BasicPool&lt;PoolApi, Block&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RevalidationType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["schnorrkel"] = [{"text":"impl RefUnwindSafe for RistrettoBoth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MiniSecretKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecretKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Keypair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpansionMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigningContext","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for XoFTranscript&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; !RefUnwindSafe for SigningTranscriptWithRng&lt;T, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Malleable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VRFOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VRFInOut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VRFProof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VRFProofBatchable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChainCode","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for ExtendedKey&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECQVCertSecret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECQVCertPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiSignatureStage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureError","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; RefUnwindSafe for AggregatePublicKeySlice&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Commitment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reveal","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for MuSig&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for CommitStage&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for RevealStage&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CosignStage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cosignature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollectStage","synthetic":true,"types":[]}];
implementors["secp256k1"] = [{"text":"impl RefUnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecretKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecoveryId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for SharedSecret&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as Digest&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicKeyFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Affine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Jacobian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AffineStorage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scalar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECMultContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECMultGenContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureArray","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; RefUnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; RefUnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["sharded_slab"] = [{"text":"impl RefUnwindSafe for DefaultConfig","synthetic":true,"types":[]},{"text":"impl&lt;T, C&nbsp;=&nbsp;DefaultConfig&gt; !RefUnwindSafe for Pool&lt;T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; !RefUnwindSafe for PoolGuard&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&nbsp;=&nbsp;DefaultConfig&gt; !RefUnwindSafe for Slab&lt;T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&nbsp;=&nbsp;DefaultConfig&gt; !RefUnwindSafe for Guard&lt;'a, T, C&gt;","synthetic":true,"types":[]}];
implementors["signature"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_allocator"] = [{"text":"impl RefUnwindSafe for FreeingBumpHeapAllocator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_api"] = [{"text":"impl&lt;'a, Block, C, NC, Backend&gt; !RefUnwindSafe for CallApiAtParams&lt;'a, Block, C, NC, Backend&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ApiRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OldRuntimeVersion","synthetic":true,"types":[]},{"text":"impl&lt;'a, Block&gt; !RefUnwindSafe for InitializeBlock&lt;'a, Block&gt;","synthetic":true,"types":[]}];
implementors["sp_application_crypto"] = [{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pair","synthetic":true,"types":[]}];
implementors["sp_arithmetic"] = [{"text":"impl RefUnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Percent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerU16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Permill","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Perbill","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Perquintill","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedI64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedI128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedU128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RationalInfinite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rational128","synthetic":true,"types":[]}];
implementors["sp_authorship"] = [{"text":"impl&lt;F, H&gt; RefUnwindSafe for InherentDataProvider&lt;F, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InherentError","synthetic":true,"types":[]}];
implementors["sp_blockchain"] = [{"text":"impl&lt;Block&gt; RefUnwindSafe for Info&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for HashAndNumber&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for TreeRoute&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; !RefUnwindSafe for HeaderMetadataCache&lt;Block&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for CachedHeaderMetadata&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ApplyExtrinsicFailed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockStatus","synthetic":true,"types":[]}];
implementors["sp_chain_spec"] = [{"text":"impl RefUnwindSafe for ChainType","synthetic":true,"types":[]}];
implementors["sp_consensus"] = [{"text":"impl&lt;Block, Transaction&gt; RefUnwindSafe for Proposal&lt;Block, Transaction&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Hashing: Hasher + RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoNetwork","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CanAuthorWithNativeVersion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlwaysCanAuthor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NeverCanAuthor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordProof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultBlockAnnounceValidator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Validation","synthetic":true,"types":[]},{"text":"impl&lt;AuthorityId&gt; RefUnwindSafe for OfflineTracker&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportedAux","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for BlockCheckParams&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block, Transaction&gt; !RefUnwindSafe for BlockImportParams&lt;Block, Transaction&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockOrigin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkChoiceStrategy","synthetic":true,"types":[]},{"text":"impl&lt;B, Transaction&gt; !RefUnwindSafe for BasicQueue&lt;B, Transaction&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for IncomingBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Extrinsic: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Header: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for BlockImportResult&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BlockImportError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for BufferedLinkSender&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for BufferedLinkReceiver&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_consensus_aura"] = [{"text":"impl&lt;AuthorityId&gt; RefUnwindSafe for ConsensusLog&lt;AuthorityId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AuthorityId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InherentDataProvider","synthetic":true,"types":[]}];
implementors["sp_consensus_babe"] = [{"text":"impl RefUnwindSafe for BabeGenesisConfigurationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeGenesisConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BabeEpochConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpaqueKeyOwnershipProof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConsensusLog","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedSlots","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimaryPreDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondaryPlainPreDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondaryVRFPreDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NextEpochDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NextConfigDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InherentDataProvider","synthetic":true,"types":[]}];
implementors["sp_consensus_slots"] = [{"text":"impl&lt;Header, Id&gt; RefUnwindSafe for EquivocationProof&lt;Header, Id&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Id: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_consensus_vrf"] = [{"text":"impl RefUnwindSafe for VRFOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VRFProof","synthetic":true,"types":[]}];
implementors["sp_core"] = [{"text":"impl RefUnwindSafe for ChangesTrieConfiguration","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash&gt; RefUnwindSafe for ChangesTrieConfigurationRange&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Blake2Hasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeccakHasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpaqueMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpaquePeerId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExecutionContext","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for NativeOrEncoded&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NeverNativeValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Void","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HexDisplay&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccountId32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dummy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyTypeId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CryptoTypeId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CryptoTypePublicPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infallible","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecretStringError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveJunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ss58AddressFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _9","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _11","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _14","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _15","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _17","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _18","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _19","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _20","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _21","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _22","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _23","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _24","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _25","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _26","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _27","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _28","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _29","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _30","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _31","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _33","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _34","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _35","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _36","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _37","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _38","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _39","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _40","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _41","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _42","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _43","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _44","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _45","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _46","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _47","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _48","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _49","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _50","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _51","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _52","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _53","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _54","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _55","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _56","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _57","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _58","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _59","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _60","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _61","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _62","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _63","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _65","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _66","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _67","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _68","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _69","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _70","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _71","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _72","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _73","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _74","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _75","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _76","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _77","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _78","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _79","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _80","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _81","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _82","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _83","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _84","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _85","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _86","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _87","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _88","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _89","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _90","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _91","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _92","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _93","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _94","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _95","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _96","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _97","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _98","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _99","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _100","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _112","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _160","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _192","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalizedSignature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalizedSignature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpRequestId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpaqueNetworkState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpaqueMultiaddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capabilities","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LimitedExternalities&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OffchainExt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TransactionPoolExt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpRequestStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InMemOffchainStorage","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; RefUnwindSafe for OffchainOverlayedChangesIter&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffchainOverlayedChangesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for OffchainOverlayedChangesDrain&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffchainOverlayedChange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffchainOverlayedChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PendingRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TestPersistentOffchainDB","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OffchainState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TestOffchainExt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PoolState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TestTransactionPoolExt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnvironmentDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternEntity","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WrappedRuntimeCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoneFetchRuntimeCode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RuntimeCode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeNotFound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CallInWasmExt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskExecutorExt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RuntimeSpawnExt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MissingHostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TaskExecutor","synthetic":true,"types":[]}];
implementors["sp_database"] = [{"text":"impl&lt;H&gt; !RefUnwindSafe for MemDb&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for Transaction&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for Change&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; RefUnwindSafe for ChangeRef&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DatabaseError","synthetic":true,"types":[]}];
implementors["sp_externalities"] = [{"text":"impl !RefUnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_finality_grandpa"] = [{"text":"impl&lt;N&gt; RefUnwindSafe for ScheduledChange&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; RefUnwindSafe for EquivocationProof&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VersionedAuthorityList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpaqueKeyOwnershipProof","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for ConsensusLog&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; RefUnwindSafe for Equivocation&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_inherents"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InherentData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckInherentsResult","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InherentDataProviders","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for MakeFatalError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_io"] = [{"text":"impl !RefUnwindSafe for VerificationExt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Crossing&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaVerifyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]}];
implementors["sp_keyring"] = [{"text":"impl RefUnwindSafe for KeyringIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseKeyringError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Keyring","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyringIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Keyring","synthetic":true,"types":[]}];
implementors["sp_keystore"] = [{"text":"impl !RefUnwindSafe for KeystoreExt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KeyStore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VRFTranscriptData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VRFSignature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VRFTranscriptValue","synthetic":true,"types":[]}];
implementors["sp_npos_elections"] = [{"text":"impl&lt;AccountId&gt; RefUnwindSafe for Candidate&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; !RefUnwindSafe for Edge&lt;AccountId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; !RefUnwindSafe for Voter&lt;AccountId&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, P&gt; RefUnwindSafe for ElectionResult&lt;AccountId, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, P&gt; RefUnwindSafe for Assignment&lt;AccountId, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for StakedAssignment&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId&gt; RefUnwindSafe for Support&lt;AccountId&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_panic_handler"] = [{"text":"impl !RefUnwindSafe for AbortGuard","synthetic":true,"types":[]}];
implementors["sp_rpc"] = [{"text":"impl RefUnwindSafe for TryFromIntError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NumberOrHex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ListOrValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime"] = [{"text":"impl&lt;Hash&gt; RefUnwindSafe for Digest&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnySignature","synthetic":true,"types":[]},{"text":"impl&lt;Info&gt; RefUnwindSafe for DispatchErrorWithPostInfo&lt;Info&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Info: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpaqueExtrinsic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureBatching","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeString","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; RefUnwindSafe for DigestItem&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiSignature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiSigner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DispatchError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for TransactionOutcome&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PiecewiseLinear&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Address, Call, Signature, Extra&gt; RefUnwindSafe for UncheckedExtrinsic&lt;Address, Call, Signature, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Address: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Signature: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Call, Extra&gt; RefUnwindSafe for SignedPayload&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Extra as SignedExtension&gt;::AdditionalSigned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AccountId, Call, Extra&gt; RefUnwindSafe for CheckedExtrinsic&lt;AccountId, Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AccountId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Number, Hash&gt; RefUnwindSafe for Header&lt;Number, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Hash as Hash&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Header, Extrinsic&gt; RefUnwindSafe for Block&lt;Header, Extrinsic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Extrinsic: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for SignedBlock&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Block: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Era","synthetic":true,"types":[]},{"text":"impl&lt;Block&gt; RefUnwindSafe for BlockId&lt;Block&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Block as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;Block as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Hash&gt; RefUnwindSafe for DigestItemRef&lt;'a, Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OpaqueDigestItemId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangesTrieSignal","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Request&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PendingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseBody","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Headers","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HeadersIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StorageValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for BlockAndTimeDeadline&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as BlockNumberProvider&gt;::BlockNumber: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for BlockAndTime&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; RefUnwindSafe for StorageLock&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, L&gt; RefUnwindSafe for StorageLockGuard&lt;'a, 'b, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintAuthorityId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestSignature","synthetic":true,"types":[]},{"text":"impl&lt;Xt&gt; RefUnwindSafe for ExtrinsicWrapper&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Xt&gt; RefUnwindSafe for Block&lt;Xt&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Xt: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Call, Extra&gt; RefUnwindSafe for TestXt&lt;Call, Extra&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Call: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Extra: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BadOrigin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LookupError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IdentityLookup&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConvertInto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlakeTwo256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Keccak256","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for AppendZerosInput&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TrailingZeroInput&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValidTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValidTransactionBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownTransaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionValidityError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionSource","synthetic":true,"types":[]},{"text":"impl&lt;Hashing&gt; RefUnwindSafe for RandomNumberGenerator&lt;Hashing&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Hashing as Hash&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime_interface"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for ExchangeableFunction&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RestoreImplementation&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; RefUnwindSafe for WrappedFFIValue&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Codec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Inner&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Enum&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_runtime_interface_test_wasm"] = [{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]}];
implementors["sp_runtime_interface_test_wasm_deprecated"] = [{"text":"impl RefUnwindSafe for HostFunctions","synthetic":true,"types":[]}];
implementors["sp_sandbox"] = [{"text":"impl !RefUnwindSafe for Memory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EnvironmentDefinitionBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Instance&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_session"] = [{"text":"impl RefUnwindSafe for MembershipProof","synthetic":true,"types":[]}];
implementors["sp_staking"] = [{"text":"impl&lt;Reporter, Offender&gt; RefUnwindSafe for OffenceDetails&lt;Reporter, Offender&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offender: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Reporter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffenceError","synthetic":true,"types":[]}];
implementors["sp_state_machine"] = [{"text":"impl&lt;H, N&nbsp;=&nbsp;u64&gt; !RefUnwindSafe for TestExternalities&lt;H, N&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BasicExternalities","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, B&gt; RefUnwindSafe for ReadOnlyExternalities&lt;'a, H, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Hash, Number&gt; RefUnwindSafe for AnchorBlockId&lt;Hash, Number&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, Number&gt; !RefUnwindSafe for State&lt;'a, H, Number&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, Number&gt; !RefUnwindSafe for InMemoryStorage&lt;H, Number&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; RefUnwindSafe for BuildCache&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; RefUnwindSafe for ConfigurationRange&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, H&gt; !RefUnwindSafe for ProvingBackend&lt;'a, S, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, H&gt; RefUnwindSafe for ProvingBackendRecorder&lt;'a, S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, H, N, Exec&gt; !RefUnwindSafe for StateMachine&lt;'a, B, H, N, Exec&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OverlayedChanges","synthetic":true,"types":[]},{"text":"impl&lt;Transaction, H, N&gt; RefUnwindSafe for StorageChanges&lt;Transaction, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Transaction, H, N&gt; RefUnwindSafe for StorageTransactionCache&lt;Transaction, H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Transaction: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, H&gt; RefUnwindSafe for TrieBackend&lt;S, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Hasher&gt;::Out: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsageInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsageUnit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StateMachineStats","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, N, B&gt; !RefUnwindSafe for Ext&lt;'a, H, N, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, N&gt; RefUnwindSafe for CacheAction&lt;H, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecutionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecutionStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackendTrustLevel","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ExecutionManager&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, H&gt; RefUnwindSafe for BackendRuntimeCode&lt;'a, B, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sp_std"] = [{"text":"impl RefUnwindSafe for Writer","synthetic":true,"types":[]}];
implementors["sp_storage"] = [{"text":"impl RefUnwindSafe for StorageKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrackedStorageKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrefixedStorageKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageChild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Storage","synthetic":true,"types":[]},{"text":"impl&lt;Hash&gt; RefUnwindSafe for StorageChangeSet&lt;Hash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChildTrieParentKeyId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChildInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChildType","synthetic":true,"types":[]}];
implementors["sp_tasks"] = [{"text":"impl !RefUnwindSafe for AsyncExternalities","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataJoinHandle","synthetic":true,"types":[]}];
implementors["sp_test_primitives"] = [{"text":"impl RefUnwindSafe for Extrinsic","synthetic":true,"types":[]}];
implementors["sp_timestamp"] = [{"text":"impl RefUnwindSafe for InherentDataProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InherentError","synthetic":true,"types":[]}];
implementors["sp_tracing"] = [{"text":"impl RefUnwindSafe for WasmMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmEntryAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmValuesSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmFields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmFieldName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmLevel","synthetic":true,"types":[]}];
implementors["sp_transaction_pool"] = [{"text":"impl RefUnwindSafe for PoolStatus","synthetic":true,"types":[]},{"text":"impl&lt;Hash, BlockHash&gt; RefUnwindSafe for TransactionStatus&lt;Hash, BlockHash&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockHash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hash: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ChainEvent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Block&gt;::Hash: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;B as Block&gt;::Header as Header&gt;::Number: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_trie"] = [{"text":"impl RefUnwindSafe for TrieStream","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for NodeCodec&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageProof","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for Layout&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB, H&gt; RefUnwindSafe for KeySpacedDB&lt;'a, DB, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB, H&gt; RefUnwindSafe for KeySpacedDBMut&lt;'a, DB, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["sp_utils"] = [{"text":"impl RefUnwindSafe for TOKIO_THREADS_TOTAL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TOKIO_THREADS_ALIVE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UNBOUNDED_CHANNELS_COUNTER","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for TracingUnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for TracingUnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for StatusSinks&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for ReadySinkEvent&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["sp_version"] = [{"text":"impl RefUnwindSafe for RuntimeVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NativeVersion","synthetic":true,"types":[]}];
implementors["sp_wasm_interface"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Pointer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnValue","synthetic":true,"types":[]}];
implementors["subkey"] = [{"text":"impl RefUnwindSafe for Subkey","synthetic":true,"types":[]}];
implementors["submit_solution"] = [{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Test","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistentialDeposit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SessionKeys","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestSessionHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RewardCurve","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxNominatorRewardedPerValidator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxIterations","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginCaller","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Call","synthetic":true,"types":[]}];
implementors["substrate_bip39"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["substrate_browser_utils"] = [{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]}];
implementors["substrate_frame_cli"] = [{"text":"impl RefUnwindSafe for ModuleIdCmd","synthetic":true,"types":[]}];
implementors["substrate_frame_rpc_support"] = [{"text":"impl&lt;V&gt; RefUnwindSafe for StorageQuery&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["substrate_frame_rpc_system"] = [{"text":"impl&lt;BlockHash, AccountId, Index&gt; !RefUnwindSafe for Client&lt;BlockHash, AccountId, Index&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P, C, B&gt; RefUnwindSafe for FullSystem&lt;P, C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C, F, Block&gt; !RefUnwindSafe for LightSystem&lt;P, C, F, Block&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["substrate_test_client"] = [{"text":"impl&lt;Block, Executor, Backend, G&gt; !RefUnwindSafe for TestClientBuilder&lt;Block, Executor, Backend, G&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RpcTransactionOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpcTransactionError","synthetic":true,"types":[]}];
implementors["substrate_test_runtime"] = [{"text":"impl RefUnwindSafe for Transfer","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DecodeFails&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockHashCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinimumPeriod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumBlockWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DbWeight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaximumBlockLength","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AvailableBlockRatio","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpochDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpectedBlockTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SessionKeys","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeApi","synthetic":true,"types":[]},{"text":"impl&lt;Block, C&gt; !RefUnwindSafe for RuntimeApiImpl&lt;Block, C&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extrinsic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginCaller","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Module&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockExecutor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Call&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["substrate_test_runtime_client"] = [{"text":"impl RefUnwindSafe for LocalExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenesisParameters","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LightFetcher","synthetic":true,"types":[]}];
implementors["substrate_test_runtime_transaction_pool"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChainState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TestApi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsBestBlock","synthetic":true,"types":[]}];
implementors["substrate_wasm_builder_runner"] = [{"text":"impl RefUnwindSafe for WasmBuilderSelectProject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmBuilderSelectSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WasmBuilderSource","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl RefUnwindSafe for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["tiny_keccak"] = [{"text":"impl RefUnwindSafe for Keccak","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl !RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WithDispatch&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Instrumented&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Entered&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl !RefUnwindSafe for Dispatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Current","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interest","synthetic":true,"types":[]}];
implementors["tracing_log"] = [{"text":"impl RefUnwindSafe for LogTracer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]}];
implementors["tracing_serde"] = [{"text":"impl !RefUnwindSafe for SerializeField","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SerializeFieldSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SerializeLevel&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SerializeId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SerializeMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SerializeEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SerializeAttributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SerializeRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SerdeMapVisitor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as SerializeMap&gt;::Error: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SerdeStructVisitor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as SerializeStruct&gt;::Error: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for SerializeFieldMap&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing_subscriber"] = [{"text":"impl RefUnwindSafe for EnvFilter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CurrentSpan","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for Alt&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, V&gt; RefUnwindSafe for Delimited&lt;D, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, V&gt; RefUnwindSafe for VisitDelimited&lt;D, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for Messages&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Directive","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BadName","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FromEnvError","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, N&gt; RefUnwindSafe for FmtContext&lt;'a, S, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for FormattedFields&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, N, E, W&gt; RefUnwindSafe for Layer&lt;S, N, E, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestWriter","synthetic":true,"types":[]},{"text":"impl&lt;N&nbsp;=&nbsp;DefaultFields, E&nbsp;=&nbsp;Format&lt;Full, SystemTime&gt;, F&nbsp;=&nbsp;LevelFilter, W&nbsp;=&nbsp;fn() -&gt; Stdout&gt; !RefUnwindSafe for Subscriber&lt;N, E, F, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&nbsp;=&nbsp;DefaultFields, E&nbsp;=&nbsp;Format&lt;Full, SystemTime&gt;, F&nbsp;=&nbsp;LevelFilter, W&nbsp;=&nbsp;fn() -&gt; Stdout&gt; !RefUnwindSafe for SubscriberBuilder&lt;N, E, F, W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Json","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JsonFields","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for JsonVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FieldFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !RefUnwindSafe for FieldFnVisitor&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compact","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Full","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; RefUnwindSafe for Format&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultFields","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DefaultVisitor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FmtSpan","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uptime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChronoUtc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChronoLocal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoxMakeWriter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for Context&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, I, S&gt; RefUnwindSafe for Layered&lt;L, I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; RefUnwindSafe for Scope&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as LookupSpan&lt;'a&gt;&gt;::Data: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Extensions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExtensionsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for SpanRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as LookupSpan&lt;'a&gt;&gt;::Data: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for Parents&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for FromRoot&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as LookupSpan&lt;'a&gt;&gt;::Data: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, S&gt; RefUnwindSafe for Layer&lt;L, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, S&gt; RefUnwindSafe for Handle&lt;L, S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TryInitError","synthetic":true,"types":[]}];
implementors["trie_db"] = [{"text":"impl&lt;'db, L&gt; !RefUnwindSafe for FatDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !RefUnwindSafe for FatDBIterator&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !RefUnwindSafe for FatDBMut&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L, Q&gt; !RefUnwindSafe for Lookup&lt;'a, L, Q&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NibbleSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NibbleVec","synthetic":true,"types":[]},{"text":"impl&lt;'a, H, HO, V, DB&gt; RefUnwindSafe for TrieBuilder&lt;'a, H, HO, V, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, HO&gt; RefUnwindSafe for TrieRoot&lt;H, HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for TrieRootUnhashed&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !RefUnwindSafe for TrieDBNodeIterator&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, HO&gt; RefUnwindSafe for TrieRootPrint&lt;H, HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; RefUnwindSafe for TrieFactory&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for TrieError&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrieSpec","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !RefUnwindSafe for TrieKinds&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NibbleSlicePlan","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for OwnedNode&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NodeHandle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Node&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeHandlePlan","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodePlan","synthetic":true,"types":[]},{"text":"impl&lt;HO, CE&gt; RefUnwindSafe for Error&lt;HO, CE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CE: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !RefUnwindSafe for TrieDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !RefUnwindSafe for TrieDBIterator&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !RefUnwindSafe for TrieDBMut&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; RefUnwindSafe for ChildReference&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !RefUnwindSafe for SecTrieDB&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'db, L&gt; !RefUnwindSafe for SecTrieDBMut&lt;'db, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; RefUnwindSafe for Record&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;HO&gt; RefUnwindSafe for Recorder&lt;HO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;HO: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["twox_hash"] = [{"text":"impl RefUnwindSafe for RandomXxHashBuilder64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RandomXxHashBuilder32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XxHash64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XxHash32","synthetic":true,"types":[]}];
implementors["uint"] = [{"text":"impl RefUnwindSafe for FromDecStrErr","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["wasmi"] = [{"text":"impl !RefUnwindSafe for Trap","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FuncInstance","synthetic":true,"types":[]},{"text":"impl&lt;'args&gt; !RefUnwindSafe for FuncInvocation&lt;'args&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FuncRef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobalInstance","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobalRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NopExternals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RuntimeArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ImportsBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MemoryInstance","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MemoryRef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ModuleInstance","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ModuleRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for NotStartedModuleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StackRecycler","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TableInstance","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TableRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TrapKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResumableError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExternVal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F64","synthetic":true,"types":[]}];
implementors["wasmi_validation"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlainValidator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlainFuncValidator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StackWithLimit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleContextBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FunctionValidationContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartedWith","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackValueType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Locals&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()