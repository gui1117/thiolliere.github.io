(function() {var implementors = {};
implementors["bitvec"] = [{"text":"impl&lt;O, T&gt; SubAssign&lt;BitVec&lt;O, T&gt;&gt; for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl SubAssign&lt;Duration&gt; for NaiveDate","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Duration&gt; for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Duration&gt; for NaiveTime","synthetic":false,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl&lt;'b&gt; SubAssign&lt;&amp;'b Scalar&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Scalar&gt; for Scalar","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; SubAssign&lt;&amp;'b EdwardsPoint&gt; for EdwardsPoint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;EdwardsPoint&gt; for EdwardsPoint","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; SubAssign&lt;&amp;'b RistrettoPoint&gt; for RistrettoPoint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;RistrettoPoint&gt; for RistrettoPoint","synthetic":false,"types":[]}];
implementors["ethereum_types"] = [{"text":"impl SubAssign&lt;U64&gt; for U64","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl&lt;'a&gt; SubAssign&lt;&amp;'a BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; SubAssign&lt;&amp;'a BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;usize&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u128&gt; for BigUint","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;&amp;'a T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["primitive_types"] = [{"text":"impl SubAssign&lt;U128&gt; for U128","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;U256&gt; for U256","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;U512&gt; for U512","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()