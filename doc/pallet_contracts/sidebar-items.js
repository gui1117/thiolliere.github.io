initSidebarItems({"enum":[["Call","Dispatchable calls."],["ContractInfo","Information for managing an account and its sub trie abstraction. This is the required info to cache for an account"],["Error","Error for the contracts module."],["RawEvent","Events for this module."],["RuntimeReturnCode","Every error that can be returned to a contract when it calls any of the host functions."]],"macro":[["convert_args",""],["define_func",""],["gen_signature",""],["gen_signature_dispatch",""],["match_tokens","A simple utility macro that helps to match against a list of tokens."],["register_func",""],["unmarshall_then_body_then_marshall",""]],"struct":[["AccountCounter","The subtrie counter."],["CodeStorage","A mapping between an original code hash and instrumented wasm code, ready for execution."],["Config","In-memory cache of configuration values."],["ContractInfoOf","The code associated with a given account."],["DefaultMaxDepth","A reasonable default value for [`Trait::MaxDepth`]."],["DefaultMaxValueSize","A reasonable default value for [`Trait::MaxValueSize`]."],["DefaultRentByteFee","A reasonable default value for [`Trait::RentByteFee`]."],["DefaultRentDepositOffset","A reasonable default value for [`Trait::RentDepositOffset`]."],["DefaultSignedClaimHandicap","A reasonable default value for [`Trait::SignedClaimedHandicap`]."],["DefaultStorageSizeOffset","A reasonable default value for [`Trait::StorageSizeOffset`]."],["DefaultSurchargeReward","A reasonable default value for [`Trait::SurchargeReward`]."],["DefaultTombstoneDeposit","A reasonable default value for [`Trait::TombstoneDeposit`]."],["GasMeter",""],["GenesisConfig","Genesis config for the module, allow to build genesis storage."],["HostFnWeights","Describes the weight for each imported function that a contract is allowed to call."],["InstructionWeights","Describes the weight for all categories of supported wasm instructions."],["Module","Contracts module."],["PristineCode","A mapping from an original code hash to the original code, untouched by instrumentation."],["RawAliveContractInfo","Information for managing an account and its sub trie abstraction. This is the required info to cache for an account."],["RawTombstoneContractInfo",""],["Schedule","Definition of the cost schedule and other parameterizations for wasm vm."],["SimpleAddressDeterminer","Simple contract address determiner."],["TrieIdFromParentCounter","Get trie id from `account_id`."]],"trait":[["ContractAddressFor","A function that generates an `AccountId` for a contract upon instantiation."],["Trait",""],["TrieIdGenerator","Get a trie id (trie id must be unique and collision resistant depending upon its context). Note that it is different than encode because trie id should be collision resistant (being a proper unique identifier)."],["WeightInfo","Should be implemented by automatically generated code of the benchmarking system for every runtime that makes use of this pallet. This trait is also implemented on `()`. The implemention on `()` is unsafe and must only be used during development. Proper weights can be generated by running the pallet_contracts benchmark suite for the runtime in question."],["_","Provides version information about a pallet."]],"type":[["AliveContractInfo",""],["BalanceOf",""],["CodeHash",""],["Event","`RawEvent` specialized for the configuration `Trait`"],["Gas",""],["NegativeImbalanceOf",""],["TombstoneContractInfo",""],["TrieId",""]]});