initSidebarItems({"enum":[["Call","Dispatchable calls."],["Data","Either underlying data blob if it is at most 32 bytes, or a hash of it. If the data is greater than 32-bytes then it will be truncated when encoding."],["Error","Error for the identity module."],["IdentityField","The fields that we use to identify the owner of an account with. Each corresponds to a field in the `IdentityInfo` struct."],["Judgement","An attestation of a registrar over how accurate some `IdentityInfo` is in describing an account."],["RawEvent","Events for this module."]],"mod":[["weights","Weights for pallet_identity THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.0 DATE: 2020-10-27, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: [] EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some(\"dev\"), DB CACHE: 128"]],"struct":[["IdentityFields","Wrapper type for `BitFlags<IdentityField>` that implements `Codec`."],["IdentityInfo","Information concerning the identity of the controller of an account."],["IdentityOf","Information that is pertinent to identify the entity behind an account."],["Module","Identity module declaration."],["RegistrarInfo","Information concerning a registrar."],["Registrars","The set of registrars. Not expected to get very big as can only be added through a special origin (likely a council motion)."],["Registration","Information concerning the identity of the controller of an account."],["SubsOf","Alternative \"sub\" identities of this account."],["SuperOf","The super-identity of an alternative \"sub\" identity together with its name, within that context. If the account is not some other account's sub-identity, then just `None`."]],"trait":[["Trait",""],["_","Provides version information about a pallet."]],"type":[["Event","`RawEvent` specialized for the configuration `Trait`"],["RegistrarIndex","An identifier for a single name registrar/identity verification service."]]});