(function() {var implementors = {};
implementors["frame_support"] = [{"text":"impl Sync for RuntimeLogger","synthetic":true,"types":[]},{"text":"impl Sync for KillOutcome","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for StorageIterator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, T, H&gt; Sync for StorageKeyIterator&lt;K, T, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Prefix, Value, QueryKind, OnEmpty&gt; Sync for StorageValue&lt;Prefix, Value, QueryKind, OnEmpty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnEmpty: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prefix: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;QueryKind: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Prefix, Hasher, Key, Value, QueryKind, OnEmpty&gt; Sync for StorageMap&lt;Prefix, Hasher, Key, Value, QueryKind, OnEmpty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;OnEmpty: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prefix: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;QueryKind: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind, OnEmpty&gt; Sync for StorageDoubleMap&lt;Prefix, Hasher1, Key1, Hasher2, Key2, Value, QueryKind, OnEmpty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Hasher2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;OnEmpty: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prefix: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;QueryKind: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for OptionQuery","synthetic":true,"types":[]},{"text":"impl Sync for ValueQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PrefixIterator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Identity","synthetic":true,"types":[]},{"text":"impl Sync for Twox64Concat","synthetic":true,"types":[]},{"text":"impl Sync for Blake2_128Concat","synthetic":true,"types":[]},{"text":"impl Sync for Blake2_128","synthetic":true,"types":[]},{"text":"impl Sync for Blake2_256","synthetic":true,"types":[]},{"text":"impl Sync for Twox128","synthetic":true,"types":[]},{"text":"impl Sync for Twox256","synthetic":true,"types":[]},{"text":"impl&lt;BlockNumber&gt; Sync for DispatchTime&lt;BlockNumber&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BlockNumber: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Sync for FilterStackGuard&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, T&gt; Sync for ClearFilterGuard&lt;F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as FilterStack&lt;T&gt;&gt;::Stack: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, L, K, T&gt; Sync for StorageMapShim&lt;S, L, K, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ExistenceRequirement","synthetic":true,"types":[]},{"text":"impl&lt;B, P&gt; Sync for SignedImbalance&lt;B, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Imbalance&lt;B&gt;&gt;::Opposite: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Balance, Imbalance, Part1, Target1, Part2, Target2&gt; Sync for SplitTwoWays&lt;Balance, Imbalance, Part1, Target1, Part2, Target2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Imbalance: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Part1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Part2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Target1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Target2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BalanceStatus","synthetic":true,"types":[]},{"text":"impl Sync for WithdrawReasons","synthetic":true,"types":[]},{"text":"impl Sync for TestRandomness","synthetic":true,"types":[]},{"text":"impl Sync for CallMetadata","synthetic":true,"types":[]},{"text":"impl Sync for GetDefault","synthetic":true,"types":[]},{"text":"impl Sync for U128CurrencyToVote","synthetic":true,"types":[]},{"text":"impl Sync for SaturatingCurrencyToVote","synthetic":true,"types":[]},{"text":"impl Sync for PalletVersion","synthetic":true,"types":[]},{"text":"impl Sync for BlockExecutionWeight","synthetic":true,"types":[]},{"text":"impl Sync for ExtrinsicBaseWeight","synthetic":true,"types":[]},{"text":"impl Sync for RocksDbWeight","synthetic":true,"types":[]},{"text":"impl Sync for ParityDbWeight","synthetic":true,"types":[]},{"text":"impl Sync for FrameTransactionPriority","synthetic":true,"types":[]},{"text":"impl Sync for Pays","synthetic":true,"types":[]},{"text":"impl Sync for DispatchClass","synthetic":true,"types":[]},{"text":"impl Sync for DispatchInfo","synthetic":true,"types":[]},{"text":"impl Sync for PostDispatchInfo","synthetic":true,"types":[]},{"text":"impl&lt;WD, CD, PF&gt; Sync for FunctionOf&lt;WD, CD, PF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CD: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;WD: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RuntimeDbWeight","synthetic":true,"types":[]},{"text":"impl&lt;Balance&gt; Sync for WeightToFeeCoefficient&lt;Balance&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Balance: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IdentityFee&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PerDispatchClass&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Instance0","synthetic":true,"types":[]},{"text":"impl Sync for Instance1","synthetic":true,"types":[]},{"text":"impl Sync for Instance2","synthetic":true,"types":[]},{"text":"impl Sync for Instance3","synthetic":true,"types":[]},{"text":"impl Sync for Instance4","synthetic":true,"types":[]},{"text":"impl Sync for Instance5","synthetic":true,"types":[]},{"text":"impl Sync for Instance6","synthetic":true,"types":[]},{"text":"impl Sync for Instance7","synthetic":true,"types":[]},{"text":"impl Sync for Instance8","synthetic":true,"types":[]},{"text":"impl Sync for Instance9","synthetic":true,"types":[]},{"text":"impl Sync for Instance10","synthetic":true,"types":[]},{"text":"impl Sync for Instance11","synthetic":true,"types":[]},{"text":"impl Sync for Instance12","synthetic":true,"types":[]},{"text":"impl Sync for Instance13","synthetic":true,"types":[]},{"text":"impl Sync for Instance14","synthetic":true,"types":[]},{"text":"impl Sync for Instance15","synthetic":true,"types":[]},{"text":"impl Sync for Never","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()